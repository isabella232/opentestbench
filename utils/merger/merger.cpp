
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <math.h>
#include <cstring>


int main(int argc, char *argv[]){

char *leftimagepath = argv[1];
char *rightimagepath = argv[2];
char *outputfilepath = argv[3];
char *widthString = argv[4];
char *heightString = argv[5];
char *bytespcString = argv[6];

int width = atoi(widthString);
int height = atoi(heightString);
int bytespc = atoi(bytespcString);

//printf("check param %s %s %s %d %d %d \n",leftimagepath, rightimagepath, outputfilepath, width, height, bytespc);

FILE *leftimagefile;
leftimagefile = fopen(leftimagepath, "r+");

FILE *rightimagefile;
rightimagefile = fopen(rightimagepath, "r+");

if(leftimagefile == NULL){
	printf("error reading %s left image file \n", leftimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}
if(rightimagefile == NULL){
	printf("error reading %s right image file \n", rightimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}

FILE *outputfile;
outputfile = fopen(outputfilepath, "w");

fseek(leftimagefile, 0, SEEK_END); // seek to end of file
int leftimagesize = ftell(leftimagefile); // get current file pointer
fseek(leftimagefile, 0, SEEK_SET ); //begining of the file

fseek(rightimagefile, 0, SEEK_END); // seek to end of file
int rightimagesize = ftell(rightimagefile); // get current file pointer
fseek(rightimagefile, 0, SEEK_SET ); //begining of the file

if(leftimagesize != rightimagesize){
	printf("The images to merge does not have the same size left %d right %d \n", rightimagesize, leftimagesize );
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}
int paramSize=(width*bytespc*height*3);
if(paramSize != rightimagesize){
	printf("The images does not have the size specified in the args left %d right %d width*bytespc*height*3 = %d \n", rightimagesize, leftimagesize,paramSize);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

unsigned char *leftimagecontent;
leftimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*leftimagesize);
fread(leftimagecontent, sizeof(unsigned char), leftimagesize, leftimagefile);

unsigned char *rightimagecontent;
rightimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*rightimagesize);
fread(rightimagecontent, sizeof(unsigned char), rightimagesize, rightimagefile);

int outputimagesize=leftimagesize+rightimagesize;
unsigned char *outputimagecontent;
outputimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*outputimagesize);


int i;
int verticaloffset=0;
int verticaloffsetcontent=0;
for(i=0;i<height;i++){
	verticaloffset=i*width*3*bytespc;
	verticaloffsetcontent=i*width*2*3*bytespc;
	memcpy(outputimagecontent+verticaloffsetcontent, leftimagecontent+verticaloffset, (unsigned int) (width*bytespc*3));
	memcpy(outputimagecontent+verticaloffsetcontent+(width*bytespc*3), rightimagecontent+verticaloffset, (unsigned int) (width*bytespc*3));
}

fwrite(outputimagecontent, sizeof(unsigned char), outputimagesize, outputfile);

}
