
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <math.h>
#include <cstring>


int main(int argc, char *argv[]){

//printf("\n Start program \n");

char *leftimagepath = argv[1];
char *widthleftString = argv[2];
char *heightleftString = argv[3];
char *rightimagepath = argv[4];
char *widthrightString = argv[5];
char *heightrightString = argv[6];
char *outputfilepath = argv[7];
char *bitDepthString = argv[8];
char *chromaSubString = argv[9];
char *centralWidthString = argv[10];

//printf("Start ati convert \n");

int widthleft = atoi(widthleftString);
int widthright = atoi(widthrightString);
int heightleft = atoi(heightleftString);
int heightright = atoi(heightrightString);
int bitDepth = atoi(bitDepthString);
int bytespc = ((bitDepth-1)/8)+1;
int chromaSub = atoi(chromaSubString);
int centralWidth = atoi(centralWidthString);



unsigned int centralColor;

//printf("check param %s %s %s %d %d %d %d %d %d \n",leftimagepath, rightimagepath, outputfilepath, widthleft, heightleft, widthright, heightright, bytespc, chromaSub);


FILE *leftimagefile;
leftimagefile = fopen(leftimagepath, "r+");

FILE *rightimagefile;
rightimagefile = fopen(rightimagepath, "r+");

if(leftimagefile == NULL){
	printf("error reading %s left image file \n", leftimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}
if(rightimagefile == NULL){
	printf("error reading %s right image file \n", rightimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}

//printf("Start size computations \n");

FILE *outputfile;
outputfile = fopen(outputfilepath, "w");

fseek(leftimagefile, 0, SEEK_END); // seek to end of file
int leftimagesize = ftell(leftimagefile); // get current file pointer
fseek(leftimagefile, 0, SEEK_SET ); //begining of the file

fseek(rightimagefile, 0, SEEK_END); // seek to end of file
int rightimagesize = ftell(rightimagefile); // get current file pointer
fseek(rightimagefile, 0, SEEK_SET ); //begining of the file

float chroma_width_multiplier;
unsigned int color1, color2;
if(chromaSub == 444){
	chroma_width_multiplier = 1;
	color1 = 0;
	color2 = 0;
}
else if(chromaSub == 422){ 
	chroma_width_multiplier = 0.5;
	color1 = 0;
	color2 = 1 << (bitDepth-1);
}
else{
	printf("Chroma sub  %d is not supported\n", chromaSub);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

//printf("Start size checks \n");


int leftParamsize = (widthleft+(2*chroma_width_multiplier*widthleft))*heightleft*bytespc;
if(leftimagesize != leftParamsize){
	printf("The left image has not the size specified by its param actual size %d (widthleft+(2*chroma_width_multiplier*widthleft))*heightleft*bytespc %d \n", leftimagesize, leftParamsize);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}
int rightParamsize = (widthright+(2*chroma_width_multiplier*widthright))*heightright*bytespc;
if(rightimagesize != rightParamsize){
	printf("The right image has not the size specified by its param actual size %d (widthright+(2*chroma_width_multiplier*widthright))*heightright*bytespc %d \n", rightimagesize, rightParamsize);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

if(heightleft != heightright){
	printf("The images do not have the same height left %d right %d \n", heightleft, heightright);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

int height=heightleft;

//printf("Start array malloc \n");

unsigned char *leftimagecontent;
leftimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*leftimagesize);
fread(leftimagecontent, sizeof(unsigned char), leftimagesize, leftimagefile);

unsigned char *rightimagecontent;
rightimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*rightimagesize);
fread(rightimagecontent, sizeof(unsigned char), rightimagesize, rightimagefile);

int centralareasize = (centralWidth+(2*chroma_width_multiplier*centralWidth))*height*bytespc;

int outputimagesize=leftimagesize+rightimagesize+centralareasize;
unsigned char *outputimagecontent;
outputimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*outputimagesize);

//printf("Start Y copy \n");

int i,q;
int verticaloffsetleft=0;
int verticaloffsetright=0;
int verticaloffsetoutput=0;
int trueWidthLeft, trueWidthRight, trueCentralWidth;
for(i=0;i<3*height;i++){
	if(i<height){
		trueWidthLeft = widthleft;
		trueWidthRight = widthright;
		trueCentralWidth = centralWidth;
		centralColor = color1;
	}
	else{
		trueWidthLeft = widthleft*chroma_width_multiplier;
		trueWidthRight = widthright*chroma_width_multiplier;
		trueCentralWidth = centralWidth*chroma_width_multiplier;	
		centralColor = color2;
	}
	verticaloffsetleft=verticaloffsetleft+trueWidthLeft*bytespc;
	verticaloffsetright=verticaloffsetright+trueWidthRight*bytespc;
	verticaloffsetoutput=verticaloffsetoutput+(trueWidthLeft+trueWidthRight+trueCentralWidth)*bytespc;

	//printf("verticaloffsetleft %d verticaloffsetright %d verticaloffsetoutput %d \n",verticaloffsetleft,verticaloffsetright,verticaloffsetoutput);
	memcpy(outputimagecontent+verticaloffsetoutput, leftimagecontent+verticaloffsetleft, (unsigned int) (trueWidthLeft*bytespc));
	if(trueCentralWidth > 0){
		for(q=0; q<trueCentralWidth; q++){
			memcpy(outputimagecontent+verticaloffsetoutput+((trueWidthLeft+q)*bytespc), &centralColor, (unsigned int) bytespc);
		}
		 //memset (outputimagecontent+verticaloffsetoutput+(trueWidthLeft*bytespc),centralColor,(unsigned int) trueCentralWidth*bytespc);
	}
	memcpy(outputimagecontent+verticaloffsetoutput+((trueWidthLeft+trueCentralWidth)*bytespc), rightimagecontent+verticaloffsetright, (unsigned int) (trueWidthRight*bytespc));
}

//printf("Chroma copy OK \n");

fwrite(outputimagecontent, sizeof(unsigned char), outputimagesize, outputfile);

}
