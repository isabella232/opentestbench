
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <math.h>
#include <cstring>


int main(int argc, char *argv[]){

//printf("\n Start program \n");

char *inputimagepath = argv[1];
char *overlayfilepath = argv[2];
char *maskfilepath = argv[3];
char *outputfilepath = argv[4];
char *widthString = argv[5];
char *heightString = argv[6];
char *bitDepthString = argv[7];
char *chromaSubString = argv[8];



//printf("Start ati convert \n");

int width = atoi(widthString);
int height = atoi(heightString);
int bitDepth = atoi(bitDepthString);
int bytespc = ((bitDepth-1)/8)+1;
int chromaSub = atoi(chromaSubString);


//printf("check param %s %s %d %d %d %d \n",inputimagepath, outputfilepath, width, height, bitDepth, chromaSub);


FILE *inputimagefile;
inputimagefile = fopen(inputimagepath, "r+");

if(inputimagefile == NULL){
	printf("error reading %s input image file \n", inputimagepath);
	fclose(inputimagefile);
	return -1;
}

FILE *overlayimagefile;
overlayimagefile = fopen(overlayfilepath, "r+");

if(overlayimagefile == NULL){
	printf("error reading %s overlay input image file \n", overlayfilepath);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	return -1;
}

FILE *maskimagefile;
maskimagefile = fopen(maskfilepath, "r+");

if(overlayimagefile == NULL){
	printf("error reading %s mask input image file \n", maskfilepath);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	fclose(maskimagefile);
	return -1;
}

FILE *outputfile;
outputfile = fopen(outputfilepath, "w");

//printf("Start size computations \n");

fseek(inputimagefile, 0, SEEK_END); // seek to end of file
int inputimagesize = ftell(inputimagefile); // get current file pointer
fseek(inputimagefile, 0, SEEK_SET ); //begining of the file

fseek(overlayimagefile, 0, SEEK_END); // seek to end of file
int overlayimagesize = ftell(overlayimagefile); // get current file pointer
fseek(overlayimagefile, 0, SEEK_SET ); //begining of the file

fseek(maskimagefile, 0, SEEK_END); // seek to end of file
int maskimagesize = ftell(maskimagefile); // get current file pointer
fseek(maskimagefile, 0, SEEK_SET ); //begining of the file

float chroma_width_multiplier;
unsigned int color1, color2;
if(chromaSub == 444){
	chroma_width_multiplier = 1;
}
else if(chromaSub == 422){ 
	chroma_width_multiplier = 0.5;
}
else{
	printf("Chroma sub  %d is not supported\n", chromaSub);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	fclose(maskimagefile);
	fclose(outputfile);
	return -1;
}

printf("Start size checks \n");

int inputParamsize = (width+(2*chroma_width_multiplier*width))*height*bytespc;
if(inputimagesize != inputParamsize){
	printf("The input image has not the size specified by its param actual size %d (width+(2*chroma_width_multiplier*width))*height*bytespc %d \n", inputimagesize, inputParamsize);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	fclose(maskimagefile);
	fclose(outputfile);
	return -1;
}

if(overlayimagesize != inputParamsize){
	printf("The overlay input image has not the size specified by its param actual size %d (width+(2*chroma_width_multiplier*width))*height*bytespc %d \n", overlayimagesize, inputParamsize);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	fclose(maskimagefile);
	fclose(outputfile);
	return -1;
}

int maskParamsize = width*height;
if(maskimagesize != maskParamsize){
	printf("The mask input image has not the size specified by its param actual size %d width*height %d \n", maskimagesize, maskParamsize);
	fclose(inputimagefile);
	fclose(overlayimagefile);
	fclose(maskimagefile);
	fclose(outputfile);
	return -1;
}


//printf("Start array malloc \n");

unsigned char *inputimagecontent;
inputimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*inputimagesize);
fread(inputimagecontent, sizeof(unsigned char), inputimagesize, inputimagefile);

unsigned char *overlayimagecontent;
overlayimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*overlayimagesize);
fread(overlayimagecontent, sizeof(unsigned char), overlayimagesize, overlayimagefile);

unsigned char *maskimagecontent;
maskimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*maskimagesize);
fread(maskimagecontent, sizeof(unsigned char), maskimagesize, maskimagefile);

int outputimagesize= inputimagesize;
unsigned char *outputimagecontent;
outputimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*outputimagesize);


int i,q;
int verticaloffsetinput=0;
int verticaloffsetoutput=0;
int trueWidth;
unsigned int blackColor;

unsigned char * maskPointer = maskimagecontent;
unsigned char * inputPointer = inputimagecontent;
unsigned char * overlayPointer = overlayimagecontent;
unsigned char * outputPointer = outputimagecontent;

int offsetComp1 = width*height*bytespc;
int offsetComp2 = offsetComp1 + width*height*bytespc*chroma_width_multiplier;
for(i=0;i<height;i++){
	for(q=0; q<width; q++){
		if(*maskPointer == 0x0){
				memcpy(outputPointer, overlayPointer, (unsigned int) bytespc);
				//for chroma-subsampled images, we only copy the even columns of chroma samples
				if(!((q%2==1)&&(chromaSub==422))){
					memcpy(outputPointer+offsetComp1, overlayPointer+offsetComp1, (unsigned int) bytespc);
					memcpy(outputPointer+offsetComp2, overlayPointer+offsetComp2, (unsigned int) bytespc);
				}
				else{
					offsetComp1 = offsetComp1 - bytespc;
					offsetComp2 = offsetComp2 - bytespc;
				}
		}
		else{
				memcpy(outputPointer, inputPointer, (unsigned int) bytespc);
				//for chroma-subsampled images, we only copy the even columns of chroma samples
				if(!((q%2==1)&&(chromaSub==422))){
					memcpy(outputPointer+offsetComp1, inputPointer+offsetComp1, (unsigned int) bytespc);
					memcpy(outputPointer+offsetComp2, inputPointer+offsetComp2, (unsigned int) bytespc);
				}
				else{
					offsetComp1 = offsetComp1 - bytespc;
					offsetComp2 = offsetComp2 - bytespc;
				}
		}
		maskPointer = maskPointer+1;
		inputPointer = inputPointer+bytespc; 
		overlayPointer = overlayPointer+bytespc; 
		outputPointer = outputPointer+bytespc;
	}
}

fwrite(outputimagecontent, sizeof(unsigned char), outputimagesize, outputfile);


fclose(inputimagefile);
fclose(overlayimagefile);
fclose(maskimagefile);
fclose(outputfile);
}
