/*  Opentestbench : an open-source framework to assess the performances of image compression schemes
    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
    Opentestbench is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
   For any question please contact : 
   Alexandre Willème (alexandre.willeme@uclouvain.be)
   Sébastien Lugan (sebastien.lugan@uclouvain.be)
*/

#include "error_insertion1b.h"


int main(int argc, char *argv[]){

char *inputfilepath = argv[1];
char *bitFlipPosC = argv[2];
char *bitFlipNumC = argv[3];

double bitFlipPospc = strtof(bitFlipPosC,NULL);
int bitFlipNum = atoi(bitFlipNumC);

unsigned int bitFlipPos, bitFlipPosbits, bitFlipPosInByte;
int i;

FILE *inputfile;
inputfile = fopen(inputfilepath, "r+");

if(inputfile == NULL){
printf("error reading %s input file \n", inputfilepath);
fclose(inputfile);
return -1;
}
if(bitFlipPospc >= 1.0 || bitFlipPospc < 0.0){
printf("bitFlipPosC not in good range \n");
fclose(inputfile);
return -2;
}

if(bitFlipNum != 1){
printf("Don't use the 1b version if u wan to flip more than 1 bit \n");
fclose(inputfile);
return -3;
}


fseek(inputfile, 0, SEEK_END); // seek to end of file
int filesize = ftell(inputfile); // get current file pointer
int filesizebits = filesize*8;

printf("size of the file : %d bytes %d bits \n", filesize, filesizebits);
//in byte
bitFlipPos = (unsigned int) round((double)filesize*bitFlipPospc);
bitFlipPosbits = (unsigned int) round((double)filesizebits*bitFlipPospc);
bitFlipPosInByte = bitFlipPosbits%8;
//printf("Position of the bit flip in the file (byte) : %d (bits) %d (in byte) %d \n", bitFlipPos,bitFlipPosbits, bitFlipPosInByte);


fseek( inputfile, bitFlipPos, SEEK_SET );

//printf("Current position (byte) : %d \n", ftell(inputfile));

unsigned char Byte;

fread(&Byte, sizeof(unsigned char), 1, inputfile);
//printf("original last byte : %x\n", lastByte);
Byte = Byte ^ (1 << (bitFlipPosInByte)) ;
//printf("tempered last byte : %x\n", lastByte);
fseek( inputfile, bitFlipPos, SEEK_SET );
fwrite(&Byte, sizeof(unsigned char), 1, inputfile);
printf("%d bits of the image tempered on the bit number %d, the byte number %d (%f) on the %d th bit of the byte\n", bitFlipNum, bitFlipPosbits, bitFlipPos ,bitFlipPospc, bitFlipPosInByte);
fclose(inputfile);

return 0;
}
