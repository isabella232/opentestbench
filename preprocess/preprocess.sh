#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C

source preprocess/paths.sh

function preprocess
{
	test_name=$1
	codec=$2
	bpp=$3
	orig_dir=$4
	decompressed_dir=$5
	color_space=$6
	chroma_sub=$7
	bit_depth=$8
	image_size=$9
	flickering_period=${10}
	decompressed_side=${11}
	x0pos_crop=${12}
	x1pos_crop=${13}
	y0pos_crop=${14}
	y1pos_crop=${15}
	central_width=${16}
	outputwidth=${17}
	outputheight=${18}
	output_dir=${19}
	niter=${20}
	shift 20

	width=${image_size/x*}
	height=${image_size#*x}
	half_width=$(bc <<< "${width}/2")
	xlimitleft=${x0pos_crop}
	xlimitright=$(bc <<< "${x1pos_crop}-1")
	ylimitlow=${y0pos_crop}
	ylimithigh=$(bc <<< "${y1pos_crop}-1")
	width_crop=$(bc <<< "${x1pos_crop}-${x0pos_crop}")
	height_crop=$(bc <<< "${y1pos_crop}-${y0pos_crop}")

	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
		extension=ppm
		inputdifftest_suffix=""
		outputdifftest_suffix=""
		difftestsubcmd=""
		if [ ${bit_depth} == "8" ]; then
			insidedifftest_suffix=:[8-=0]:[8-=1]:[8-=2]
		elif [ ${bit_depth} == "10" ]; then
			insidedifftest_suffix=:[6-],[10-=0]:[6-],[10-=1]:[6-],[10-=2]
		elif [ ${bit_depth} == "12" ]; then
			insidedifftest_suffix=:[4-],[12-=0]:[4-],[12-=1]:[4-],[12-=2]
		fi
	elif [[ ("${color_space}" == "YCbCr") && ("${chroma_sub}" == "422") && (("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
		extension=yuv
		#in CE5 we do ycbr to rgb conversion 
		chroma_sub="444"
		if [ ${bit_depth} == "10" ]; then
			inputdifftest_suffix=@${width}x${height}x3:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1
			#insidedifftest_suffix=:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1
			insidedifftest_suffix=:[6-],[10-=0]:[6-],[10-=1]:[6-],[10-=2]
			#outputdifftest_suffix=@${outputwidth}x${outputheight}x3:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1
			outputdifftest_suffix=""
			difftestsubcmd="--asprec 10 --cup 2 1 --fromycbcr"
		elif [ ${bit_depth} == "12" ]; then
			inputdifftest_suffix=@${width}x${height}x3:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1
			#insidedifftest_suffix=:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1
			insidedifftest_suffix=:[4-],[12-=0]:[4-],[12-=1]:[4-],[12-=2]
			#outputdifftest_suffix=@${outputwidth}x${outputheight}x3:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1
			outputdifftest_suffix=""
			difftestsubcmd="--asprec 12 --cup 2 1 --fromycbcr"
		fi
	fi
  mkdir -p ${output_dir}/${test_name}
	test_dir=${output_dir}/${test_name}

	tmp_dir=$(mktemp -d /tmp/preprocess_XXXXX)
	showdecompressed=0
	i=0
  for f in $(find -L ${decompressed_dir} -type f|grep -v ".txt$"|sort); do
		g=${f##*/}
		name=${g}
		orig_name=${name/_${codec}_${bpp/./_}bpp}
		echo orig ${orig_name} ${codec} ${bpp} ${niter}
	 	if [ -f ${test_dir}/${name} ]; then
		    echo "Already there!"
	  else
			if [ ${i} = 0 ]; then
				showdecompressed=$(bc <<< "(${showdecompressed}+1)%2")
			fi
			${DIFFTESTPATH}/difftest_ng ${difftestsubcmd}	--crop ${xlimitleft} ${ylimitlow} ${xlimitright} ${ylimithigh} --convert ${tmp_dir}/temphalfdecomp.raw@${width_crop}x${height_crop}x3${insidedifftest_suffix} ${decompressed_dir}/${name}${inputdifftest_suffix} -
			${DIFFTESTPATH}/difftest_ng ${difftestsubcmd}	--crop ${xlimitleft} ${ylimitlow} ${xlimitright} ${ylimithigh} --convert ${tmp_dir}/temphalforig.raw@${width_crop}x${height_crop}x3${insidedifftest_suffix} ${orig_dir}/${orig_name}${inputdifftest_suffix} -
			if [ ${showdecompressed} = 1 ]; then
				if [ ${decompressed_side} == "left" ]; then
					${MERGERV2PATH}/mergerv2 ${tmp_dir}/temphalfdecomp.raw ${width_crop} ${height_crop} ${tmp_dir}/temphalforig.raw ${width_crop} ${height_crop} ${tmp_dir}/merged.raw ${bit_depth} ${chroma_sub} ${central_width} ${outputwidth} ${outputheight}
					echo DISPLAY LEFT DECOMPRESSED
				else
					${MERGERV2PATH}/mergerv2 ${tmp_dir}/temphalforig.raw ${width_crop} ${height_crop} ${tmp_dir}/temphalfdecomp.raw ${width_crop} ${height_crop} ${tmp_dir}/merged.raw ${bit_depth} ${chroma_sub} ${central_width} ${outputwidth} ${outputheight}
					echo DISPLAY RIGHT DECOMPRESSED
				fi
			else
				${MERGERV2PATH}/mergerv2 ${tmp_dir}/temphalforig.raw ${width_crop} ${height_crop} ${tmp_dir}/temphalforig.raw ${width_crop} ${height_crop} ${tmp_dir}/merged.raw ${bit_depth} ${chroma_sub} ${central_width} ${outputwidth} ${outputheight}
				echo DISPLAY ORIG ONLY
			fi
			#in CE5 we do YCbCr to RGB conversion
			#outname=${orig_name}
			outname=${orig_name/.yuv/.ppm}
			${DIFFTESTPATH}/difftest_ng	--convert ${test_dir}/${outname}${outputdifftest_suffix} ${tmp_dir}/merged.raw@${outputwidth}x${outputheight}x3${insidedifftest_suffix} -			
		fi
		i=$(bc <<< "(${i}+1)%${flickering_period}")
  done
	rm -r ${tmp_dir}/*
	rmdir ${tmp_dir}
}




# usage:
#  preprocess.sh test_type codec bitrate orig_dir decompressed_dir color_space chroma_sub bit_depth image_size flickering_period decompressed_side x0pos_crop x1pos_crop y0pos_crop y1pos_crop central_width 

test_type=$1
codec=$2
bpp=$3
orig_dir=$4
decompressed_dir=$5
color_space=$6
chroma_sub=$7
bit_depth=$8
image_size=$9
flickering_period=${10}
decompressed_side=${11}
x0pos_crop=${12}
x1pos_crop=${13}
y0pos_crop=${14}
y1pos_crop=${15}
central_width=${16}
outputwidth=${17}
outputheight=${18}
niter=${19}
pseudo_name=${20}
shift 20

echo niter ${niter}  

if [ -z ${test_type} ] || [ -z ${codec} ] || [ -z ${bpp} ] || [ -z ${orig_dir} ] || [ -z ${decompressed_dir} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${flickering_period} ] || [ -z ${decompressed_side} ] || [ -z ${x0pos_crop} ] || [ -z ${x1pos_crop} ] || [ -z ${y0pos_crop} ] || [ -z ${y1pos_crop} ] || [ -z ${central_width} || [ -z ${niter} ]; then
  echo usage preprocess.sh test_type codec bitrate orig_dir decompressed_dir color_space chroma_sub bit_depth image_size flickering_period decompressed_side x0pos_crop x1pos_crop y0pos_crop y1pos_crop central_width niter
  exit 1
fi

mkdir -p ./E0_flicker_seqs/stills/${codec}
output_dir=./E0_flicker_seqs/stills/${codec}
short_name=${decompressed_dir##*/}
#testname=${short_name}_preprocess_fp${flickering_period}_${decompressed_side}_crop_x0_${x0pos_crop}_x1_${x1pos_crop}_y0_${y0pos_crop}_y1_${y1pos_crop}_cw${central_width}
testname=${pseudo_name}_${codec}_${bpp/./_}bpp_${decompressed_side}
preprocess ${testname} ${codec} ${bpp} ${orig_dir} ${decompressed_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${flickering_period} ${decompressed_side} ${x0pos_crop} ${x1pos_crop} ${y0pos_crop} ${y1pos_crop} ${central_width} ${outputwidth} ${outputheight} ${output_dir}  ${niter}
