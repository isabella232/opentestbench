
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <math.h>
#include <cstring>


int main(int argc, char *argv[]){

char *leftimagepath = argv[1];
char *widthleftString = argv[2];
char *heightleftString = argv[3];
char *rightimagepath = argv[4];
char *widthrightString = argv[5];
char *heightrightString = argv[6];
char *outputfilepath = argv[7];
char *bytespcString = argv[8];

int widthleft = atoi(widthleftString);
int widthright = atoi(widthrightString);
int heightleft = atoi(heightleftString);
int heightright = atoi(heightrightString);
int bytespc = atoi(bytespcString);

//printf("check param %s %s %s %d %d %d %d %d \n",leftimagepath, rightimagepath, outputfilepath, widthleft, heightleft, widthright, heightright, bytespc);


FILE *leftimagefile;
leftimagefile = fopen(leftimagepath, "r+");

FILE *rightimagefile;
rightimagefile = fopen(rightimagepath, "r+");

if(leftimagefile == NULL){
	printf("error reading %s left image file \n", leftimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}
if(rightimagefile == NULL){
	printf("error reading %s right image file \n", rightimagefile);
	fclose(leftimagefile);
	fclose(rightimagefile);
	return -1;
}

FILE *outputfile;
outputfile = fopen(outputfilepath, "w");

fseek(leftimagefile, 0, SEEK_END); // seek to end of file
int leftimagesize = ftell(leftimagefile); // get current file pointer
fseek(leftimagefile, 0, SEEK_SET ); //begining of the file

fseek(rightimagefile, 0, SEEK_END); // seek to end of file
int rightimagesize = ftell(rightimagefile); // get current file pointer
fseek(rightimagefile, 0, SEEK_SET ); //begining of the file

if(leftimagesize != widthleft*3*heightleft*bytespc){
	printf("The left image has not the size specified by its param actual size %d widthleft*3*heightleft*bytespc %d \n", leftimagesize, widthleft*3*heightleft*bytespc);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

if(rightimagesize != widthright*3*heightright*bytespc){
	printf("The right image has not the size specified by its param actual size %d widthright*3*heightright*bytespc %d \n", rightimagesize, widthright*3*heightright*bytespc);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

if(heightleft != heightright){
	printf("The images do not have the same height left %d right %d \n", heightleft, heightright);
	fclose(leftimagefile);
	fclose(rightimagefile);
	fclose(outputfile);
	return -1;
}

int height=heightleft;

unsigned char *leftimagecontent;
leftimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*leftimagesize);
fread(leftimagecontent, sizeof(unsigned char), leftimagesize, leftimagefile);

unsigned char *rightimagecontent;
rightimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*rightimagesize);
fread(rightimagecontent, sizeof(unsigned char), rightimagesize, rightimagefile);

int outputimagesize=leftimagesize+rightimagesize;
unsigned char *outputimagecontent;
outputimagecontent = (unsigned char *) malloc(sizeof(unsigned char)*outputimagesize);


int i;
int verticaloffsetleft=0;
int verticaloffsetright=0;
int verticaloffsetoutput=0;
for(i=0;i<3*height;i++){
	verticaloffsetleft=i*widthleft*bytespc;
	verticaloffsetright=i*widthright*bytespc;
	verticaloffsetoutput=i*(widthleft+widthright)*bytespc;
	memcpy(outputimagecontent+verticaloffsetoutput, leftimagecontent+verticaloffsetleft, (unsigned int) (widthleft*bytespc));
	memcpy(outputimagecontent+verticaloffsetoutput+(widthleft*bytespc), rightimagecontent+verticaloffsetright, (unsigned int) (widthright*bytespc));
}

fwrite(outputimagecontent, sizeof(unsigned char), outputimagesize, outputfile);

}
