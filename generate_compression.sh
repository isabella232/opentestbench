#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C
codec=$1
path=$2

#a number that is only used to identify the log of the test
testnumber="${codec}MG"

# either singlegen multigen or errortest
test_type=multigen

#list of codecs to test 
codecs=(${codec})

if [[ ("${codec}" == "ce5_low_memory") ]]; then
  # list of bitrates to test  (in bpp)
  bitrates=(2 3 3 4 4 5)
elif [[ ("${codec}" == "ce5_low_logic") ]]; then
  # list of bitrates to test  (in bpp)
  bitrates=(2 3 3 4 3 4)
elif [[ ("${codec}" == "ce5_main") ]]; then
  # list of bitrates to test  (in bpp)
  bitrates=(2 3 3 4 3 4)
elif [[ ("${codec}" == "ce5_high") ]]; then
  # list of bitrates to test  (in bpp)
  bitrates=(1 2 2 3 2 3)
fi

#list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
content_dirs=(${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422 ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422 ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444 ${path}/APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444 ${path}/APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444)
#one file on ${content_dirs_subsampling_factor} is processed in the tests
content_dirs_sb_factors=(1 1 1 1 1 1)
# either RGB or YCbCr
color_spaces=(YCbCr YCbCr RGB RGB RGB RGB)
# either 444 or 422
chroma_subs=(422 422 444 444 444 444)
# either 8, 10 or 12 bits
bit_depths=(10 10 10 10 8 8)
# WIDTHxHEIGHT
image_sizes=(3840x2160 3840x2160 4096x1744 4096x1744 2560x1440 2560x1440)
# only used for multigen : number of encoding/decoding cycles to perform
niter=7
# only used for multigen : =1 if the comparison must be made wrt the original picture and =0 if the comparison is made wrt the input of each generation
comparison_with_original=1



#-----------------------------------------------------------------------------

source benchmark/paths.sh
mkdir -p log_files
logfile="./log_files/log_${testnumber}.dat"
echo -n "" >  ${logfile}
for ((b=0; b<${#content_dirs[@]}; ++b)); do
			echo "Processing step: ${test_type} codec ${codec} bitrate ${bitrates[$b]} content_dir ${content_dirs[$b]}"
			echo -n "Processing step: codec ${codec} bitrate ${bitrates[$b]} content_dir ${content_dirs[$b]}" >> ${logfile}
			if [ ${test_type} = "singlegen" ]; then
				bash benchmark/singlegen.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} 1>>${logfile} 2>>${logfile}
			elif [ ${test_type} = "singlegen_vdp" ]; then
				bash benchmark/singlegen_vdp.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} 1>>${logfile} 2>>${logfile}
			elif [ ${test_type} = "multigen" ]; then 
				bash benchmark/multigen.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${niter} ${comparison_with_original} 1>>${logfile} 2>>${logfile}
			elif [ ${test_type} = "multigen_vdp" ]; then 
				bash benchmark/multigen_vdp.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${niter} ${comparison_with_original} 1>>${logfile} 2>>${logfile}
			elif [ ${test_type} = "multigen_edition" ]; then 
				bash benchmark/multigen_edition.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${niter} ${comparison_with_original} ${edition_type} ${edition_config} 1>>${logfile} 2>>${logfile}
			elif [ ${test_type} = "errortest" ]; then 
				bash benchmark/errortest.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${nerrors} ${error_offset[$b]} ${forcedQp} 1>>${logfile} 2>>${logfile}
			else
				echo This test type does not exist
			fi
done
