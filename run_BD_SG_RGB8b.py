from __future__ import division
from math import log10
import sys
sys.path.insert(0, 'benchmark_graphics')
from bjontegaard_metric import *
import csv 
import time
import os 
import os.path
import numpy as np

codecs=np.array(['XSM_v1_1_1', 'XSM_v1_1_2'])
picture_set=np.array(['Tools_1520x1200_8b', 'HintergrundMusik_1920x1080_8b', 'FemaleStripedHorseFly_1920x1080_8b', 'RICHTER_ScreenContent2_4096x2160p_60_8b_sRGB_444_00001',  'ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040', 'HUAWEI_ScMap_1280x720p_60_8b_sRGB_444_000', 'APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444_000', 'RICHTER_ScreenContent_4096x2160p_15_8b_sRGB_444_0059'])
content_dirs_sb_factors=np.array([1, 1, 1, 1, 1, 1, 1, 1])
color_spaces=np.array(['RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB'])
chroma_subs=np.array(['444', '444', '444', '444', '444', '444', '444', '444'])
bit_depths=np.array([8, 8, 8, 8, 8, 8, 8, 8])
image_sizes=np.array(['1520x1200', '1920x1080', '1920x1080', '4096x2160', '2880x1620', '1280x720', '2560x1440', '4096x2160'])
bitrates=np.array([3, 4, 6, 8])
gen_number=sys.argv[1]




startPath='results/multi_generation/'
numToCompare=len(codecs)
BR=np.zeros((len(picture_set), numToCompare, len(bitrates)))
PSNR=np.zeros((len(picture_set), numToCompare, len(bitrates)))

if not os.path.exists('graphics/single_generation'):
	os.makedirs('graphics')
	os.makedirs('graphics/single_generation')

for a in range(0, len(picture_set)):
	for q in range(0, len(bitrates)):
		for i in range(0, len(codecs)):
			filename = startPath+codecs[i]+'/psnr_'+picture_set[a]+'_sb'+str(content_dirs_sb_factors[a])+'_'+codecs[i]+'_'+str(bitrates[q])+'bpp_r'+str(gen_number)+'.dat'
			if not os.path.isfile(filename):
					print filename+' does not exist'
			#seqname= picture_set[a]+'_sb'+str(content_dirs_sb_factors[a])+'_'+codecs[i]+'_'+str(bitrates[q])+'bpp_r'+str(gen_number)
			#print filename
			psnrTab = []
			with open(filename) as f:
				for line in f:
					line = line.split()
					if line[0] != 'NumberSizeExceeded':
						psnrVal=float(line[1])
						psnrTab.append(psnrVal)
			psnrMean=np.mean(psnrTab)
			BR[a][i][q]=bitrates[q]
			PSNR[a][i][q]=psnrMean	

#print BR
#print PSNR

log = open('graphics/single_generation/Bjontegaard_g'+str(gen_number)+'.dat','w')
#loop that compute the Bjondegaard metric of each config wrt ref
for a in range(0, len(picture_set)):
	log.write(picture_set[a]+'\n')
	for i in range(1, len(codecs)):
			fbcConfig=codecs[i]+' vs '+codecs[0]
			log.write('---- '+fbcConfig+'\n')
			bd_psnr=BD_PSNR(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);	
			bd_rate=BD_RATE(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);
			log.write('--------- BD_PSNR: '+str(bd_psnr)+' dB \n')  	
			log.write('--------- BD_RATE: '+str(bd_rate)+'\n')  	

