#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C

# either singlegen multigen or errortest
test_type=multigen

#list of codecs to test 
codec=$1
path=$2

decompressed_dir_path=results/multi_generation/${codec}

if [[ ("${codec}" == "ce5_low_memory") ]]; then
  # list of bitrates to test  (in bpp)
  bpps=(2 3 3 4 4 5)
elif [[ ("${codec}" == "ce5_low_logic") ]]; then
  # list of bitrates to test  (in bpp)
  bpps=(2 3 3 4 3 4)
elif [[ ("${codec}" == "ce5_main") ]]; then
  # list of bitrates to test  (in bpp)
  bpps=(2 3 3 4 3 4)
elif [[ ("${codec}" == "ce5_high") ]]; then
  # list of bitrates to test  (in bpp)
  bpps=(1 2 2 3 2 3)
fi

orig_dirs=(${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422 ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422 ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444 ${path}/APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444 ${path}/APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444)	
pseudo_orig_dirs=(VQEG_ParkJoy_3840x2160p VQEG_ParkJoy_3840x2160p BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444 BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444 APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444 APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444)
ffmpeg_cmd_names=(VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_%05d.ppm VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_%05d.ppm BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_%08d.ppm BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_%08d.ppm APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444_%03d.ppm APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444_%03d.ppm)
ffmpeg_start_numb=(15523 15523 4606 4606 0 0)
ffmpeg_rates=(50 50 24 24 60 60)
x0pos_crop=(0 0 0 0 0 0)
y0pos_crop=(0 0 0 0 0 0)
x1pos_crop=(1894 1894 1894 1894 1894 1894)
y1pos_crop=(2160 2160 1744 1744 1440 1440)

# either RGB or YCbCr
color_spaces=(YCbCr YCbCr RGB RGB RGB RGB)
# either 444 or 422
chroma_subs=(422 422 444 444 444 444)
# either 8, 10 or 12 bits
bit_depths=(10 10 10 10 8 8)
# WIDTHxHEIGHT
image_sizes=(3840x2160 3840x2160 4096x1744 4096x1744 2560x1440 2560x1440)
	

niter=7
central_width=50
output_size=3840x2160
flickering_period=9999999999
decompressed_sides=(left)


#-----------------------------------------------------------------------------
source benchmark/paths.sh
for ((b=0; b<${#orig_dirs[@]}; ++b)); do
		for ((y=0; y<${#decompressed_sides[@]}; ++y)); do
					decompressed_side=${decompressed_sides[$y]}
					output_width=${output_size/x*}
					output_height=${output_size#*x}
					bpp=${bpps[$b]}
					orig_dir=${orig_dirs[$b]}
					short_name=${orig_dir##*/}
					pseudo_name=${pseudo_orig_dirs[$b]}
					decompressed_name=${short_name}_sb1_${codec}_${bpp/./_}bpp_r${niter}	
					decompressed_path=${decompressed_dir_path}/${decompressed_name}
					echo ${decompressed_path}
					
					echo "Pre-processing step: ${test_type} codec ${codecs[$b]} bitrate ${bpp} decompressed_dirs ${decompressed_dirs[$b]}"
					bash preprocess/preprocess.sh ${test_type} ${codec} ${bpp} ${orig_dir}  ${decompressed_path} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${flickering_period} ${decompressed_side} ${x0pos_crop[$b]} ${x1pos_crop[$b]} ${y0pos_crop[$b]} ${y1pos_crop[$b]} ${central_width} ${output_width} ${output_height} ${niter} ${pseudo_name}

					#testname=${short_name}_sb1_${codec}_${bpp/./_}bpp_r${niter}_preprocess_fp${flickering_period}_${decompressed_side}_crop_x0_${x0pos_crop[$b]}_x1_${x1pos_crop[$b]}_y0_${y0pos_crop[$b]}_y1_${y1pos_crop[$b]}_cw${central_width}	
					testname=${pseudo_name}_${codec}_${bpp/./_}bpp_${decompressed_side}
					still_folder=${PWD}/preprocessed_material/frames/${codec}/${testname}

					seqs_folder=${PWD}/preprocessed_material/seqs/${codec}
					mkdir -p ${seqs_folder}
					if [[ ("${color_spaces[$b]}" == "RGB") && ("${bit_depths[$b]}" == "8") ]]; then
							ffmpeg -r ${ffmpeg_rates[$b]} -s ${output_width}x${output_height} -f image2 -start_number ${ffmpeg_start_numb[$b]} -vcodec ppm -i ${still_folder}/${ffmpeg_cmd_names[$b]} -vcodec rawvideo -r ${ffmpeg_rates[$b]} ${seqs_folder}/${testname}.mov
					elif [[ ("${color_spaces[$b]}" == "RGB") && ("${bit_depths[$b]}" == "10") ]]; then
							ffmpeg -r ${ffmpeg_rates[$b]} -s ${output_width}x${output_height} -f image2 -start_number ${ffmpeg_start_numb[$b]} -vcodec ppm -i ${still_folder}/${ffmpeg_cmd_names[$b]} -vcodec v410 -r ${ffmpeg_rates[$b]} ${seqs_folder}/${testname}.mov
					elif [[ ("${color_spaces[$b]}" == "YCbCr") && ("${bit_depths[$b]}" == "10") ]]; then
							#in the context of CE5 use, v410				
							ffmpeg -r ${ffmpeg_rates[$b]} -s ${output_width}x${output_height} -f image2 -start_number ${ffmpeg_start_numb[$b]} -vcodec ppm -i ${still_folder}/${ffmpeg_cmd_names[$b]}  -vcodec v410 -r ${ffmpeg_rates[$b]} ${seqs_folder}/${testname}.mov
					else
							echo "This format is not supported"
					fi
					rm -r ${tmpdir}
					#to save disk space
					rm -r ${still_folder}
		done
done
