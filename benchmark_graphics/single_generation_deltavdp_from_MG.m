close all

arrayMeanQ = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));

arrayMeanSeqQ = NaN(size(codecs,2),size(bitrates,2));

seqname = repmat({'TEST'}, size(codecs,2),size(picture_set,2),size(bitrates,2));


 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:size(bitrates,2)
              filename = strcat('../results/multi_generation/',codecs{i},'/vdp_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r',num2str(gen_number),'.dat');
							seqname{i,a,q} = strcat(picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r',num2str(gen_number));
              
              if exist(filename, 'file') == 2
                  contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
									name=contentTable{:,1};
									toDelete=find(ismember(name, '!!!'));

									Q = contentTable{:,2};

									Q(toDelete) = [];
									name(toDelete) = [];
									if(strcmp(name(size(Q,1)),'NumberSizeExceeded'))
										numberExceed = Q(size(Q,1));
										Q = Q(1:size(Q,1)-1);
									else
										numberExceed = NaN;
									end
									if size(contentTable,2) >= 6
										realSizes = contentTable{:,5};
										realSizes = realSizes(1:size(realSizes,1)-1);
										realSizes(toDelete) = [];
										targetSizes = contentTable{:,6};
										targetSizes = targetSizes(1:size(targetSizes,1)-1);
										targetSizes(toDelete) = [];
										%numberExceed = nnz(targetSizes < realSizes);
									end

									arrayMeanQ(i,a,q) = mean(Q);

              else
                  arrayMeanQ(i,a,q) = 0;

                  disp(strcat(filename,' unavailable'));
              end
          end
          
     end
     for q=1:size(bitrates,2)
					arrayMeanSeqQ(i,q) = mean(arrayMeanQ(i,:,q));
     end
 end
 
arrayMeanQGraph = arrayMeanQ;

arrayMeanSeqQGraph = arrayMeanSeqQ;


mkdir('../graphics/single_generation_vdp');
codecs_legend = strrep(codecs, '_', '\_');
codecs_legend = strrep(codecs_legend, 'hevc', 'hevc (not CBR and low-latency)');
codecs_legend = strrep(codecs_legend, 'j2kbc\_PSNR', 'j2kbc\_PSNR (not CBR and low-latency)');
codecs_legend = strrep(codecs_legend, 'jpeg', 'jpeg (not CBR and low-latency)');
picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-+'  '-*' '-x' '-s' '-d' '-^' '-v' '-<' '->' ':o' ':p' ':h'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'OuterPosition', [50 50 1600 900]);
      xlabel('Output bitrates (in bpp)','Fontsize',14);
      ylabel('Delta-Q parameter [0,100]','Fontsize',14);        
      for i=1:size(codecs,2)
          plotMeanQ = squeeze(arrayMeanQGraph(i,a,:));
          plotBitrates = bitrates;
					plotDelta = plotMeanQ-squeeze(arrayMeanQGraph(1,a,:));
          hold on
          plot(plotBitrates,plotDelta,charttype{i},'LineWidth',2);
      end
			grid on;
			%axis(axislimit(a,:));
			legend(codecs_legend{:},'Location','northeast','Fontsize',12);
			%legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
      title(strcat('Single generation VDP Delta-results for image set "',picture_set_titles{a},'" at gen.',{' '},num2str(gen_number)));
			filename=strcat('../graphics/single_generation_vdp/',picture_set{a},'_DeltaVdp_g',num2str(gen_number),'.png');
			set(gca,'fontsize',14);
			mystyle = hgexport('factorystyle');
			mystyle.Width = 1600;
			mystyle.Height = 900;
			mystyle.Units = 'pixels';
			mystyle.Resolution = 200;
			hgexport(gcf, filename, mystyle, 'Format', 'png');
  end



%for mean on all image sets
fig = figure;
set(fig, 'OuterPosition', [50 50 1600 900]);
xlabel('Output bitrates (in bpp)','Fontsize',14);
ylabel('Delta-Q parameter [0,100]','Fontsize',14);           
for i=1:size(codecs,2)
		plotMeanQ = squeeze(arrayMeanSeqQGraph(i,:));
     plotBitrates = bitrates;
		 plotMeanDelta = plotMeanQ-squeeze(arrayMeanSeqQGraph(1,:));
     hold on
     plot(plotBitrates,plotMeanDelta,charttype{i},'LineWidth',2);
end
grid on;
%axis(axislimitmean);
%xlim([3 14]);
legend(codecs_legend{:},'Location','northeast','Fontsize',12);
%legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
title(strcat('Mean single generation VDP Delta-results (',color_spaces{a},{' '},chroma_subs{a},{' '},num2str(bit_depths{a}),'-bit images) at gen.',{' '},num2str(gen_number)));
set(gca,'fontsize',14);


mystyle = hgexport('factorystyle');
mystyle.Width = 1600;
mystyle.Height = 900;
mystyle.Units = 'pixels';
mystyle.Resolution = 200;
hgexport(gcf, strcat('../graphics/single_generation_vdp/meanDeltaVdp_',color_spaces{a},chroma_subs{a},num2str(bit_depths{a}),'b_g',num2str(gen_number),'.png'),mystyle, 'Format', 'png');


% write in file
logname = strcat('../graphics/single_generation_vdp/SG_mean_',color_spaces{1},chroma_subs{1},num2str(bit_depths{1}),'b_g',num2str(gen_number),'.dat');
logID = fopen(logname,'w');

for i=1:size(codecs,2)
	fprintf(logID,'------------------------------- \n');
	fprintf(logID,'%s \n',codecs{i});
	fprintf(logID,'Sequence Name | Q Param \n');
	for q=1:size(bitrates,2)
			fprintf(logID,'--- %s bpp \n',num2str(bitrates(q)));
			for a=1:size(picture_set,2)
			fprintf(logID,'%s %4.4f \n',seqname{i,a,q},arrayMeanQ(i,a,q));
			end
			fprintf(logID,'AVERAGE_ON_ALL_SEQUENCES_OF_THIS_TYPE %4.4f \n',arrayMeanSeqQ(i,q));
		end
end


