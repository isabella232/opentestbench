close all

arrayMean = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean0 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean1 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean2 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMeanSeq = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq0 = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq1 = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq2 = NaN(size(codecs,2),size(bitrates,2));

seqname = repmat({'TEST'}, size(codecs,2),size(picture_set,2),size(bitrates,2));

mystyle = hgexport('factorystyle');
mystyle.Width = 10;
mystyle.Height = 6.6;
mystyle.Units = 'inches';
mystyle.Resolution = 200;

 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:size(bitrates,2)
              filename = strcat('../results/single_generation/',codecs{i},'/psnr_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r',num2str(gen_number),'.dat');
							seqname{i,a,q} = strcat(picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r',num2str(gen_number));
              if exist(filename, 'file') == 2
                  contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ','HeaderLines',0);
									name=contentTable{:,1};
									toDelete=find(ismember(name, '!!!'));

									PSNR = contentTable{:,2};

									PSNR0 = contentTable{:,3};
									PSNR1 = contentTable{:,4};
									PSNR2 = contentTable{:,5};

									PSNR(toDelete) = [];
									PSNR0(toDelete) = [];
									PSNR1(toDelete) = [];
									PSNR2(toDelete) = [];
									name(toDelete) = [];
									if(strcmp(name(size(PSNR,1)),'NumberSizeExceeded'))
										numberExceed = PSNR(size(PSNR,1));
										PSNR = PSNR(1:size(PSNR,1)-1);
										PSNR0 = PSNR0(1:size(PSNR0,1)-1);
										PSNR1 = PSNR1(1:size(PSNR1,1)-1);
										PSNR2 = PSNR2(1:size(PSNR2,1)-1);
									else
										numberExceed = NaN;
									end
									if size(contentTable,2) >= 7
										realSizes = contentTable{:,6};
										realSizes = realSizes(1:size(realSizes,1)-1);
										realSizes(toDelete) = [];
										targetSizes = contentTable{:,7};
										targetSizes = targetSizes(1:size(targetSizes,1)-1);
										targetSizes(toDelete) = [];
										%numberExceed = nnz(targetSizes < realSizes);
									end

									meanPSNR = mean(PSNR);
									arrayMean(i,a,q) = meanPSNR;

									meanPSNR0 = mean(PSNR0);
									arrayMean0(i,a,q) = meanPSNR0;

									meanPSNR1 = mean(PSNR1);
									arrayMean1(i,a,q) = meanPSNR1;

									meanPSNR2 = mean(PSNR2);
									arrayMean2(i,a,q) = meanPSNR2;

              else
									arrayMean(i,a,q) = 0;
									arrayMean0(i,a,q) = 0;
									arrayMean1(i,a,q) = 0;
									arrayMean2(i,a,q) = 0;
                  disp(strcat(filename,' unavailable'));
              end
          end
          
     end
     for q=1:size(bitrates,2)
					PSNRseq = arrayMean(i,:,q);
					meanPSNRseq = mean(PSNRseq);
					arrayMeanSeq(i,q) = meanPSNRseq;

					PSNRseq0 = arrayMean0(i,:,q);
					meanPSNRseq0 = mean(PSNRseq0);
					arrayMeanSeq0(i,q) = meanPSNRseq0;

					PSNRseq1 = arrayMean1(i,:,q);
					meanPSNRseq1 = mean(PSNRseq1);
					arrayMeanSeq1(i,q) = meanPSNRseq1;

					PSNRseq2 = arrayMean2(i,:,q);
					meanPSNRseq2 = mean(PSNRseq2);
					arrayMeanSeq2(i,q) = meanPSNRseq2;
     end
 end
 
arrayMeanGraph = arrayMean;
if(bit_depths{a} == '10')
      arrayMeanGraph(arrayMeanGraph==Inf) = 136; 		
elseif(bit_depths{a} == '8')
      arrayMeanGraph(arrayMeanGraph==Inf) = 125; %125dB corresponds to inf
elseif(bit_depths{a} == '12')
      arrayMeanGraph(arrayMeanGraph==Inf) = 141; %125dB corresponds to inf
end	


arrayMeanSeqGraph = arrayMeanSeq;
if(bit_depths{a} == '10')
  	arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 136; %125dB corresponds to inf										
elseif(bit_depths{a} == '8')
    arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 125;
elseif(bit_depths{a} == '12')
		arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 141;
end	



 
mkdir(path{1});
codecs_legend = strrep(codecs, '_', '\_');
codecs_legend = strrep(codecs_legend, 'hevc', 'hevc (not CBR and low-latency)');
codecs_legend = strrep(codecs_legend, 'j2kbc\_PSNR', 'j2kbc\_PSNR (not CBR and low-latency)');
%codecs_legend = strrep(codecs_legend, 'jpeg', 'jpeg (not CBR and low-latency)');
picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-+'  '-*' '-x' '-s' '-d' '-^' '-v' '-<' '->' '-o' '-p' '-h' '-d' '-s' '-o' '-+'  '-*' '-v' '-<' '-*' '-x'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'OuterPosition', [50 50 1800 900]);
      xlabel('Output bitrates (in bpp)','Fontsize',14);
      ylabel('Delta-PSNR (in dB)','Fontsize',14);        
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMeanGraph(i,a,:));
          plotBitrates = bitrates;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotBitrates(ix)=[];
					plotDelta = plotMean-squeeze(arrayMeanGraph(2*(floor((i-1)/2))+1,a,:));
          hold on
          plot(plotBitrates,plotDelta,charttype{i},'LineWidth',2);
      end
			grid on;
%xlim([3 14]);
			%axis(axislimit(a,:));
			%legend(codecs_legend{:},'Location','northeast','Fontsize',12);
			legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
      title(strcat('Single gen delta for image set "',picture_set_titles{a},'" at gen.',{' '},num2str(gen_number)));
			filename=strcat(path{1},'/',picture_set{a},'_Delta_g',num2str(gen_number),'.png');
			set(gca,'fontsize',14);
			hgexport(gcf, filename, mystyle, 'Format', 'png');
  end


%for whisker plot on each codec vs previous with bitrate on X axis
if(withWhisker==1)
	for i=1:size(codecs,2)/2
			fig = figure;
			set(fig, 'OuterPosition', [50 50 1800 900]);
			xlabel('Output bitrates (in bpp)','Fontsize',14);
			ylabel('Delta-PSNR (in dB)','Fontsize',14);  
			plotMean = squeeze(arrayMeanGraph(2*i,:,:));
		  plotBitrates = bitrates;
		  ix=(plotMean == 0);
		  plotMean(ix)=[];    
		  plotBitrates(ix)=[];
			plotDelta = plotMean-squeeze(arrayMeanGraph(2*i-1,:,:));
		  hold on
			boxplot(plotDelta,plotBitrates,'PlotStyle','traditional');
			plotMean = squeeze(arrayMeanSeqGraph(2*i,:));
	   	plotDeltaMean = plotMean-squeeze(arrayMeanSeqGraph(2*i-1,:));
 			hold on
 			plot(plotDeltaMean, 'gs', 'MarkerSize',10, 'MarkerEdgeColor','b', 'MarkerFaceColor',[0.5,0.5,0.5]);
			for q=1:size(bitrates,2)
					text(q,plotDeltaMean(q),strcat({' '},{' '},num2str(plotDeltaMean(q),2)))
			end
			set(gca, 'XGrid','on');
			set(gca, 'YGrid','on');
			title(strcat('Mean single gen delta of',{' '},codecs_legend{2*i},' vs ',{' '},codecs_legend{2*i-1},' (',color_spaces{a},' images) at gen.',{' '},num2str(gen_number)));
			set(gca,'fontsize',14);
			hgexport(gcf, strcat(path{1},'/meanDelta_',codecs{2*i},'_vs_',codecs{2*i-1},'_',color_spaces{a},'_g',num2str(gen_number),'.png'),mystyle, 'Format', 'png');
	end
end

%for whisker plot all codecs on x axis and some bitrate
codecs_legendwhisker=codecs;
if(withWhisker==1)
	allcodec_plotDelta = zeros(size(selectedbppforwhiskerall,2)*(size(codecs,2)/2),size(picture_set,2));
	allcodec_xaxis = {};
	fig = figure;
	set(fig, 'OuterPosition', [50 50 1800 900]);
	xlabel('XSM configurations','Fontsize',14);
	ylabel('Delta-PSNR (in dB)','Fontsize',14);  
	for z=1:size(selectedbppforwhiskerall,2)
		idx=find(bitrates==selectedbppforwhiskerall(z));
	  for i=1:size(codecs,2)/2
				plotMean = squeeze(arrayMeanGraph(2*i,:,idx));
				plotDelta = plotMean-squeeze(arrayMeanGraph(2*i-1,:,idx));
				allcodec_plotDelta((size(codecs,2)/2)*(z-1)+i,:) = plotDelta;
				allcodec_xaxis = [allcodec_xaxis strcat(codecs_legendwhisker{2*i},{' '},num2str(selectedbppforwhiskerall(z)),{' '},'bpp')];
			end
	end
	boxplot(allcodec_plotDelta', allcodec_xaxis ,'PlotStyle','traditional');
	plotDeltaMean = squeeze(mean(allcodec_plotDelta,2));
	hold on
	plot(plotDeltaMean, 'gs', 'MarkerSize',10, 'MarkerEdgeColor','b', 'MarkerFaceColor',[0.5,0.5,0.5]);
	for q=1:(size(codecs,2)/2)*size(selectedbppforwhiskerall,2)
			text(q,plotDeltaMean(q),strcat({' '},{' '},num2str(plotDeltaMean(q),2)))
	end
	set(gca,'FontSize',14,'XTickLabelRotation',45);
	set(gca, 'XGrid','on');
	set(gca, 'YGrid','on');
	title(strcat('Mean single gen delta of all codecs vs CE5 ref',{' ('},color_spaces{a},{' '},' images) at gen.',{' '},num2str(gen_number)));
	set(gca,'fontsize',14);
	hgexport(gcf, strcat(path{1},'/meanDelta_all_vs_ref_',color_spaces{a},'_g',num2str(gen_number),'.png'),mystyle, 'Format', 'png');
end


%for mean on all image sets
fig = figure;
set(fig, 'OuterPosition', [50 50 1600 900]);
xlabel('Output bitrates (in bpp)','Fontsize',14);
ylabel('Delta-PSNR (in dB)','Fontsize',14);   
for i=1:size(codecs,2)
			plotMean = squeeze(arrayMeanSeqGraph(i,:));
     plotBitrates = bitrates;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotBitrates(ix)=[];
		 plotDelta = plotMean-squeeze(arrayMeanSeqGraph(2*(floor((i-1)/2))+1,:));
     hold on
     plot(plotBitrates,plotDelta,charttype{i},'LineWidth',2);
end
grid on;
%legend(codecs_legend{:},'Location','northeast','Fontsize',12);
legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
title(strcat('Mean single gen delta (',color_spaces{a},' images) at gen.',{' '},num2str(gen_number)));
set(gca,'fontsize',14);
hgexport(gcf, strcat(path{1},'/meanDelta_',color_spaces{a},'_g',num2str(gen_number),'.png'),mystyle, 'Format', 'png');

% write in file
logname = strcat(path{1},'/SG_mean_',color_spaces{1},'_g',num2str(gen_number),'.dat');
logID = fopen(logname,'w');

for i=1:size(codecs,2)
	fprintf(logID,'------------------------------- \n');
	fprintf(logID,'%s \n',codecs{i});
	fprintf(logID,'Sequence Name | PSNR comp 0 | PSNR comp 1 | PSNR comp 2 | Mean PSNR over 3 components \n');
	for q=1:size(bitrates,2)
			fprintf(logID,'--- %s bpp \n',num2str(bitrates(q)));
			for a=1:size(picture_set,2)
			fprintf(logID,'%s %4.4f %4.4f %4.4f %4.4f \n',seqname{i,a,q},arrayMean0(i,a,q),arrayMean1(i,a,q),arrayMean2(i,a,q),arrayMean(i,a,q));
			end
			fprintf(logID,'AVERAGE_ON_ALL_SEQUENCES_OF_THIS_TYPE %4.4f %4.4f %4.4f %4.4f \n',arrayMeanSeq0(i,q),arrayMeanSeq1(i,q),arrayMeanSeq2(i,q),arrayMeanSeq(i,q));
		end
end


