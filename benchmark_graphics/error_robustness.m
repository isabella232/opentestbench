close all

%codecs={'j2kull' 'j2kullc' 'vc2hqcbr' 'vc2ld' 'jpegls' 'jpeg'};
%picture_set={'1_CrowdRun_2160p50_RGB_8b_one'};
%color_spaces={'RGB'};
%chroma_subs={'444'};
%bit_depths={'8'};
%image_sizes={'3840x2160'};
%bitrates=6;

tablePSNR = cell(size(codecs,2),size(picture_set,2));
arrayMean = zeros(size(codecs,2),size(picture_set,2));

range = zeros(size(codecs,2), 6);

 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          filenameerror = strcat('../results/error_robustness/',codecs{i},'/psnr_',picture_set{a},'_',codecs{i},'_',...
int2str(bitrates),'bpp_',color_spaces{a},'_',chroma_subs{a},'_',bit_depths{a},'b_',image_sizes{a},'.dat');
          filenameoriginal =  strcat('../results/single_generation/',codecs{i},'/psnr_',picture_set{a},'_',codecs{i},'_',...
int2str(bitrates),'bpp_',color_spaces{a},'_',chroma_subs{a},'_',bit_depths{a},'b_',image_sizes{a},'.dat');        
           if exist(filenameerror, 'file') == 2
               if exist(filenameoriginal, 'file') == 2
                   contentTable = readtable(filenameerror,'ReadVariableNames',false,'Delimiter',' ');
                   PSNR = contentTable{:,2};                   
                   if(bit_depths{a} == '10')
                          PSNR(PSNR==Inf) = 136; %125dB corresponds to inf
									elseif(bit_depths{a} == '8')
                          PSNR(PSNR==Inf) = 125;
                   end
                   numFail = PSNR(size(PSNR,1));
                   PSNR = PSNR(1:size(PSNR,1)-1);
                   ix= isnan(PSNR);
                   PSNR(ix)=[];
                   numError = numFail+size(PSNR,1);
                   PSNRtab = array2table(PSNR);
                   tablePSNR{i,a} = table2cell(PSNRtab);

                   origTable = readtable(filenameoriginal,'ReadVariableNames',false,'Delimiter',' ');
                   originalPSNR = origTable{:,2};
                   num1 = size(PSNR(PSNR>(0.99*originalPSNR)),1);
                   num2 = size(PSNR((PSNR<=0.99*originalPSNR) & (PSNR>(0.95*originalPSNR))),1);
                   num3 = size(PSNR((PSNR<=0.95*originalPSNR) & (PSNR>(0.9*originalPSNR))),1);
                   num4 = size(PSNR((PSNR<=0.9*originalPSNR) & (PSNR>(0.5*originalPSNR))),1);
                   num5 = size(PSNR(PSNR<=0.5*originalPSNR),1);

                   range(i,1) = num1/numError;
                   range(i,2) = num2/numError;
                   range(i,3) = num3/numError;
                   range(i,4) = num4/numError;
                   range(i,5) = num5/numError;
                   range(i,6) = numFail/numError;
				

                    %disp(strcat('ok',filename));
               else
                   disp(strcat(filenameoriginal,' unavailable'));
               end
           else 
               disp(strcat(filenameerror,' unavailable'));
           end
     end
 end
 
figure1 = figure;
set(figure1, 'Position', [500	1500 1400 600]);
codecs_legend = codecs;

%to avoid overflow
range(:,1) = range(:,1) - 0.0001;

range

percentscale = {'0%' '10%' '20%' '30%' '40%' '50%' '60%' '70%' '80%' '90%' '100%'};
barh(range,0.7,'stacked');
set(gca,'yticklabel',codecs_legend);
set(gca,'xticklabel',percentscale);
picture_set_titles=strrep(picture_set, '_', '\_');
title(strcat({'Error robustness evaluation on '}, picture_set_titles{1},{' at '},int2str(bitrates),{' bpp for '},int2str(numError),{' random errors'}),'fontsize',16);
legend('PSNR loss < 1%','1% <= PSNR loss < 5%','5% <= PSNR loss < 10%',...
    '10% <= PSNR loss < 50%', 'PSNR loss > 50%', 'Software failure','Location','southwest');
ylabel('Codecs under test','fontsize',18);
xlabel('Distribution of each bin in %','fontsize',18);
colormap(jet(6));
mkdir('../graphics/error_robustness');
 set(gca,'fontsize',16);
hgexport(gcf, strcat('../graphics/error_robustness/mean_',int2str(bitrates),'bpp',image_sizes{a},color_spaces{a},chroma_subs{a},bit_depths{a},int2str(numError),'.jpeg'), hgexport('factorystyle'), 'Format', 'jpeg');
 


%set(figure1, 'Position', [100, 100, 1200, 500]);

%sim_hatch = applyhatch_pluscolor(gcf,'x+\/|-',1,[1 1 1 1 1 1],jet(6),1600,80,40);

