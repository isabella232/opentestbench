close all

arrayMean = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMeanSeq = zeros(size(codecs,2),niter);
 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:niter
               filename = strcat('../results/multi_generation/',codecs{i},'/psnr_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates),'bpp_r',num2str(q),'.dat');
               if exist(filename, 'file') == 2
                   contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
										name=contentTable{:,1};
										toDelete=find(ismember(name, '!!!'));
                   PSNR = contentTable{:,2};
										PSNR(toDelete) = [];
										name(toDelete) = [];
										if(strcmp(name(size(PSNR,1)),'NumberSizeExceeded'))
											numberExceed = PSNR(size(PSNR,1));
											PSNR = PSNR(1:size(PSNR,1)-1);
										else
											numberExceed = NaN;
										end
										if size(contentTable,2) >= 4
											realSizes = contentTable{:,3};
											realSizes = realSizes(1:size(realSizes,1)-1);
											realSizes(toDelete) = [];
											targetSizes = contentTable{:,4};
											targetSizes = targetSizes(1:size(targetSizes,1)-1);
											targetSizes(toDelete) = [];
											%numberExceed = nnz(targetSizes < realSizes);
										end
                    if(bit_depths{a} == '10')
													dynamic = 1024-1;
										elseif(bit_depths{a} == '8')
													dynamic = 256-1;
										elseif(bit_depths{a} == '12')
													dynamic = 2^12-1;
										end

                   MSE=dynamic.^2./(10.^(PSNR./10.0));
									MSE(PSNR==Inf) = 0;
									meanMSE = mean(MSE);

									arrayMean(i,a,q) = 10*log10(dynamic^2/meanMSE);
									arrayMeanMSE(i,a,q) = meanMSE;
									if(bit_depths{a} == '10')
                          arrayMean(arrayMean==Inf) = 136; 		
										elseif(bit_depths{a} == '8')
                          arrayMean(arrayMean==Inf) = 125; %125dB corresponds to inf
										elseif(bit_depths{a} == '12')
                          arrayMean(arrayMean==Inf) = 141; %125dB corresponds to inf
										end	
               else %does not happen in multigen
                    arrayMean(i,a,q) = 0;
										arrayMeanMSE(i,a,q) = Inf;
                    disp(strcat(filename,' unavailable'));
               end
          end
     end
     %compute the mean over all the sequences
      for q=1:niter
					MSEseq = arrayMeanMSE(i,:,q);
					meanMSEseq = mean(MSEseq);
					arrayMeanSeq(i,q) = 10*log10(dynamic^2/meanMSEseq);
					if(bit_depths{a} == '10')
		        	arrayMeanSeq(arrayMeanSeq==Inf) = 136; %125dB corresponds to inf											
					elseif(bit_depths{a} == '8')
		          arrayMeanSeq(arrayMeanSeq==Inf) = 125;
					elseif(bit_depths{a} == '12')
							arrayMeanSeq(arrayMeanSeq==Inf) = 141;
					end	
					if(meanMSEseq==Inf)
						arrayMeanSeq(i,q) = 0;
					end
      end
 end
 
 
mkdir('../graphics/multi_generation');
codecs_legend = strrep(codecs, '_', '\_');
picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-x' '-*' '-.' '-+' '-^' '-p' '-h'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig=figure;
      set(fig, 'Position', [800 800 950 600]);
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMean(i,a,:));
          plotGenerations = 1:niter;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotGenerations(ix)=[];
          hold on
          plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
      end
      xlabel('Generation #','Fontsize',18);
      ylabel('PSNR (in dB)','Fontsize',18); 
      legend(codecs_legend{:},'Location','best','Fontsize',18);
			grid on;
			%axis(axislimit(a,:));
      title(strcat('Multi generation results for "',picture_set_titles{a},'" at',{' '},num2str(bitrates),' bpp'),'Fontsize',18);
			set(gca,'fontsize',18);
      filename=strcat('../graphics/multi_generation/',picture_set{a},num2str(bitrates),'bpp.jpeg');
        hgexport(gcf, filename, hgexport('factorystyle'), 'Format', 'jpeg');
  end



%for mean on all image sets
%fig=figure;
%set(fig, 'Position', [800 800 950 600]);
%xlabel('Generation #','fontsize',18);
%ylabel('PSNR (in dB)','fontsize',18); 
%for i=1:size(codecs,2)
%     plotMean = squeeze(arrayMeanSeq(i,:));
%     plotGenerations = 1:niter;
%     ix=(plotMean == 0);
%     plotMean(ix)=[];    
%     plotGenerations(ix)=[];
%     hold on
%     plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
%end
%grid on;
%axis(axislimitmean);
%legend(codecs_legend{:},'Location','best','Fontsize',18);
%title(strcat({'Mean multi generation results at '},num2str(bitrates),' bpp (',image_sizes{a},{' '},color_spaces{a},{' '},chroma_subs{a},{' '},bit_depths{a},'-bit images)'),'Fontsize',18);
%set(gca,'fontsize',18);
%hgexport(gcf, strcat('../graphics/multi_generation/mean_',num2str(bitrates),'bpp',image_sizes{a},color_spaces{a},chroma_subs{a},bit_depths{a},niter,'.jpeg'), hgexport('factorystyle'), 'Format', 'jpeg');
 

