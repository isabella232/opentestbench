close all

arrayMean = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMean0 = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMean1 = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMean2 = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMeanSeq = zeros(size(codecs,2),niter);
arrayMeanSeq0 = zeros(size(codecs,2),niter);
arrayMeanSeq1 = zeros(size(codecs,2),niter);
arrayMeanSeq2 = zeros(size(codecs,2),niter);

seqname = repmat({'TEST'}, size(codecs,2),size(picture_set,2),niter);

 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:niter
               filename = strcat('../results/multi_generation/',codecs{i},'/psnr_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates),'bpp_r',num2str(q),'.dat');
							seqname{i,a,q} = strcat(picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates),'bpp_r',num2str(q));

               if exist(filename, 'file') == 2
                   contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
										name=contentTable{:,1};
										toDelete=find(ismember(name, '!!!'));
										PSNR = contentTable{:,2};
										PSNR0 = contentTable{:,3};
										PSNR1 = contentTable{:,4};
										PSNR2 = contentTable{:,5};

										PSNR(toDelete) = [];
										PSNR0(toDelete) = [];
										PSNR1(toDelete) = [];
										PSNR2(toDelete) = [];
										name(toDelete) = [];
										if(strcmp(name(size(PSNR,1)),'NumberSizeExceeded'))
											numberExceed = PSNR(size(PSNR,1));
											PSNR = PSNR(1:size(PSNR,1)-1);
											PSNR0 = PSNR0(1:size(PSNR0,1)-1);
											PSNR1 = PSNR1(1:size(PSNR1,1)-1);
											PSNR2 = PSNR2(1:size(PSNR2,1)-1);
										else
											numberExceed = NaN;
											FAIL = 0
										end
										if size(contentTable,2) >= 7
											realSizes = contentTable{:,6};
											realSizes = realSizes(1:size(realSizes,1)-1);
											realSizes(toDelete) = [];
											targetSizes = contentTable{:,7};
											targetSizes = targetSizes(1:size(targetSizes,1)-1);
											targetSizes(toDelete) = [];
											%numberExceed = nnz(targetSizes < realSizes);
										end

									meanPSNR = mean(PSNR);
									arrayMean(i,a,q) = meanPSNR;

									meanPSNR0 = mean(PSNR0);
									arrayMean0(i,a,q) = meanPSNR0;

									meanPSNR1 = mean(PSNR1);
									arrayMean1(i,a,q) = meanPSNR1;

									meanPSNR2 = mean(PSNR2);
									arrayMean2(i,a,q) = meanPSNR2;

               else
									arrayMean(i,a,q) = 0;
									arrayMean0(i,a,q) = 0;
									arrayMean1(i,a,q) = 0;
									arrayMean2(i,a,q) = 0;
                  disp(strcat(filename,' unavailable'));
               end
          end
     end
     %compute the mean over all the sequences
      for q=1:niter
					PSNRseq = arrayMean(i,:,q);
					meanPSNRseq = mean(PSNRseq);
					arrayMeanSeq(i,q) = meanPSNRseq;

					PSNRseq0 = arrayMean0(i,:,q);
					meanPSNRseq0 = mean(PSNRseq0);
					arrayMeanSeq0(i,q) = meanPSNRseq0;

					PSNRseq1 = arrayMean1(i,:,q);
					meanPSNRseq1 = mean(PSNRseq1);
					arrayMeanSeq1(i,q) = meanPSNRseq1;

					PSNRseq2 = arrayMean2(i,:,q);
					meanPSNRseq2 = mean(PSNRseq2);
					arrayMeanSeq2(i,q) = meanPSNRseq2;
      end
 end
 

arrayMeanGraph = arrayMean;
if(bit_depths{a} == '10')
      arrayMeanGraph(arrayMeanGraph==Inf) = 136; 		
elseif(bit_depths{a} == '8')
      arrayMeanGraph(arrayMeanGraph==Inf) = 125; %125dB corresponds to inf
elseif(bit_depths{a} == '12')
      arrayMeanGraph(arrayMeanGraph==Inf) = 141; %125dB corresponds to inf
end	

arrayMeanSeqGraph = arrayMeanSeq;
if(bit_depths{a} == '10')
  	arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 136; %125dB corresponds to inf											
elseif(bit_depths{a} == '8')
    arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 125;
elseif(bit_depths{a} == '12')
		arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 141;
end	
 
mkdir(path{1});
codecs_legend = strrep(codecs, '_', '\_');
codecs_legend = strrep(codecs_legend, 'hevc', 'hevc (not CBR and low-latency)');
codecs_legend = strrep(codecs_legend, 'j2kbc\_PSNR', 'j2kbc\_PSNR (not CBR and low-latency)');
codecs_legend = strrep(codecs_legend, 'jpeg', 'jpeg (not CBR and low-latency)');
picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-+'  '-*' '-x' '-s' '-d' '-^' '-v' '-<' '->' '-o' '-p' '-h' '-d' '-s' '-o' '-+'  '-*' '-v' '-<'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig=figure;
			set(fig, 'OuterPosition', [50 50 1800 900]);
      %set(fig, 'Position', [800 800 950 600]);
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMeanGraph(i,a,:));
          plotGenerations = 1:niter;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotGenerations(ix)=[];
          hold on
          plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
      end
      xlabel('Generation #','Fontsize',14);
      ylabel('PSNR (in dB)','Fontsize',14); 
      %legend(codecs_legend{:},'Location','NorthEast','Fontsize',12);
			legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
			grid on;
			%axis(axislimit(a,:));
      title(strcat('Multi gen for "',picture_set_titles{a},'" at',{' '},num2str(bitrates),' bpp'),'Fontsize',14);
			set(gca,'fontsize',14);
      filename=strcat(path{1},'/',picture_set{a},'_',num2str(bitrates),'bpp.jpeg');
			mystyle = hgexport('factorystyle');
			mystyle.Width = 1800;
			mystyle.Height = 900;
			mystyle.Units = 'pixels';
			mystyle.Resolution = 200;        
			hgexport(gcf, filename, mystyle, 'Format', 'jpeg');
  end

%for whisker plot on each codec
if(withWhisker==1)
	for i=1:size(codecs,2)
			fig = figure;
			set(fig, 'OuterPosition', [50 50 1800 900]);
			xlabel('Generation #','Fontsize',14);
			ylabel('PSNR (in dB)','Fontsize',14); 
			plotMean = squeeze(arrayMeanGraph(i,:,:));
		  plotGenerations = 1:niter;

		  ix=(plotMean == 0);
		  plotMean(ix)=[];    
		  plotGenerations(ix)=[];
		  hold on
			boxplot(plotMean,plotGenerations,'PlotStyle','traditional');
			set(gca, 'XGrid','on');
			set(gca, 'YGrid','on');
			%legend(codecs_legend{:},'Location','northeast','Fontsize',12);
			legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
			title(strcat('Mean multi gen of',{' '},codecs_legend{i},' at',{' '},num2str(bitrates),' bpp (',color_spaces{a},{' '},chroma_subs{a},{' '},num2str(bit_depths{a}),'-bit images)'));
			set(gca,'fontsize',14);
			mystyle = hgexport('factorystyle');
			mystyle.Width = 1800;
			mystyle.Height = 900;
			mystyle.Units = 'pixels';
			mystyle.Resolution = 200;
			hgexport(gcf, strcat(path{1},'/mean_',num2str(bitrates),'bpp_',codecs{i},'_',color_spaces{a},chroma_subs{a},num2str(bit_depths{a}),'b_',num2str(niter),'gen.jpeg'), mystyle, 'Format', 'jpeg');
	end
end


%for mean on all image sets
fig=figure;
set(fig, 'OuterPosition', [50 50 1800 900]);
%set(fig, 'Position', [800 800 950 600]);
xlabel('Generation #','fontsize',14);
ylabel('PSNR (in dB)','fontsize',14); 
for i=1:size(codecs,2)
     plotMean = squeeze(arrayMeanSeq(i,:));
     plotGenerations = 1:niter;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotGenerations(ix)=[];
     hold on
     plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
end
grid on;
%axis(axislimitmean);
%legend(codecs_legend{:},'Location','NorthEast','Fontsize',12);
legend(codecs_legend{:},'Location','eastoutside','Fontsize',12);
title(strcat({'Mean multi gen at '},num2str(bitrates),' bpp (',color_spaces{a},{' '},chroma_subs{a},{' '},num2str(bit_depths{a}),'-bit images)'),'Fontsize',14);
set(gca,'fontsize',14);
mystyle = hgexport('factorystyle');
mystyle.Width = 1800;
mystyle.Height = 900;
mystyle.Units = 'pixels';
mystyle.Resolution = 200;
hgexport(gcf, strcat(path{1},'/mean_',num2str(bitrates),'bpp',color_spaces{a},chroma_subs{a},num2str(bit_depths{a}),'b_',num2str(niter),'gen.jpeg'), mystyle, 'Format', 'jpeg');


% write in file
logname = strcat(path{1},'/MG_mean_',color_spaces{1},chroma_subs{1},num2str(bit_depths{1}),'b.dat');
logID = fopen(logname,'w');

for i=1:size(codecs,2)
	fprintf(logID,'------------------------------- \n');
	fprintf(logID,'%s \n',codecs{i});
	fprintf(logID,'Sequence Name | PSNR comp 0 | PSNR comp 1 | PSNR comp 2 | Mean PSNR over 3 components \n');
	for q=1:niter
			fprintf(logID,'--- iter %s \n',num2str(q));
			for a=1:size(picture_set,2)
				fprintf(logID,'%s %4.4f %4.4f %4.4f %4.4f \n',seqname{i,a,q},arrayMean0(i,a,q),arrayMean1(i,a,q),arrayMean2(i,a,q),arrayMean(i,a,q));
			end
			fprintf(logID,'AVERAGE_ON_ALL_SEQUENCES_OF_THIS_TYPE %4.4f %4.4f %4.4f %4.4f \n',arrayMeanSeq0(i,q),arrayMeanSeq1(i,q),arrayMeanSeq2(i,q),arrayMeanSeq(i,q));
		end
end

