close all

tablePSNR = cell(size(codecs,2),size(picture_set,2),niter);
arrayMean = zeros(size(codecs,2),size(picture_set,2),niter);
arrayMeanSeq = zeros(size(codecs,2),niter);
 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:niter
               filename = strcat('../results/multi_generation/',codecs{i},'/psnr_',picture_set{a},'_',codecs{i},'_',...
                  int2str(bitrates),'bpp_',color_spaces{a},'_',chroma_subs{a},'_',bit_depths{a},'b_',image_sizes{a},'_r',int2str(q),'.dat');
               if exist(filename, 'file') == 2
                   contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
                   PSNR = contentTable{:,2};
                    if(bit_depths{a} == '10')
                          %PSNR(PSNR==Inf) = 136; %125dB corresponds to inf
													dynamic = 1024-1;
									elseif(bit_depths{a} == '8')
                          %PSNR(PSNR==Inf) = 125;
													dynamic = 256-1;
									end	
                   PSNRtab = array2table(PSNR);
                   tablePSNR{i,a,q} = table2cell(PSNRtab);
                   MSE=dynamic.^2./(10.^(PSNR./10.0));
									MSE(PSNR==Inf) = 0;
									meanMSE = mean(MSE);
									arrayMean(i,a,q) = 10*log10(dynamic^2/meanMSE);
									arrayMeanMSE(i,a,q) = meanMSE;
									if(bit_depths{a} == '10')
                          arrayMean(arrayMean==Inf) = 136; %125dB corresponds to inf
												
										elseif(bit_depths{a} == '8')
                          arrayMean(arrayMean==Inf) = 125;

										end	
                   %arrayMean(i,a,q) = mean(PSNR);
               else %does not happen in multigen
                    tablePSNR{i,a,q} = {'0'};
                    arrayMean(i,a,q) = 0;
										arrayMeanMSE(i,a,q) = Inf;
                    disp(strcat(filename,' unavailable'));
               end
          end
     end
     %compute the mean over all the sequences
      for q=1:niter
					MSEseq = arrayMeanMSE(i,:,q);
					meanMSEseq = mean(MSEseq);
					arrayMeanSeq(i,q) = 10*log10(dynamic^2/meanMSEseq);
					if(bit_depths{a} == '10')
		        	arrayMeanSeq(arrayMeanSeq==Inf) = 136; %125dB corresponds to inf											
					elseif(bit_depths{a} == '8')
		          arrayMeanSeq(arrayMeanSeq==Inf) = 125;
					end	
					if(meanMSEseq==Inf)
						arrayMeanSeq(i,q) = 0;
					end
          %arrayMeanSeq(i,q) = mean(squeeze(arrayMean(i,:,q)));
      end
 end
 
 
mkdir('../graphics/multi_generation');
codecs_legend = codecs;
picture_set_titles=strrep(picture_set, '_', '\_');
%codecs_legend = {'JP2K ULL' 'JP2K ULLC'}
charttype = {'-o' '-x' '-*' '-.' '-+' '-^' '-p'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig=figure;
      set(fig, 'Position', [800 800 950 600]);
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMean(i,a,:));
          plotGenerations = 1:niter;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotGenerations(ix)=[];
          hold on
          plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
      end
      xlabel('Generation #','Fontsize',18);
      ylabel('PSNR (in dB)','Fontsize',18); 
      legend(codecs_legend{:},'Location','northeast','Fontsize',18);
			grid on;
			axis(axislimit(a,:));
      title(strcat('Multi generation results for "',picture_set_titles{a},'" at',{' '},int2str(bitrates),' bpp'),'Fontsize',18);
			set(gca,'fontsize',18);
      filename=strcat('../graphics/multi_generation/',picture_set{a},int2str(bitrates),'bpp.jpeg');
        hgexport(gcf, filename, hgexport('factorystyle'), 'Format', 'jpeg');
  end



%for mean on all image sets
fig=figure;
set(fig, 'Position', [800 800 950 600]);
xlabel('Generation #','fontsize',18);
ylabel('PSNR (in dB)','fontsize',18); 
for i=1:size(codecs,2)
     plotMean = squeeze(arrayMeanSeq(i,:));
     plotGenerations = 1:niter;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotGenerations(ix)=[];
     hold on
     plot(plotGenerations,plotMean,charttype{i},'LineWidth',2);
end
	grid on;
axis(axislimitmean);
 legend(codecs_legend{:},'Location','west','Fontsize',18);
 title(strcat({'Mean multi generation results at '},int2str(bitrates),' bpp (',image_sizes{a},{' '},color_spaces{a},{' '},chroma_subs{a},{' '},bit_depths{a},'-bit images)'),'Fontsize',18);
 set(gca,'fontsize',18);
hgexport(gcf, strcat('../graphics/multi_generation/mean_',int2str(bitrates),'bpp',image_sizes{a},color_spaces{a},chroma_subs{a},bit_depths{a},niter,'.jpeg'), hgexport('factorystyle'), 'Format', 'jpeg');
 

