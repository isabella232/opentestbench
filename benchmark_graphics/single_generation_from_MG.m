close all


tablePSNR = cell(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMeanSeq = NaN(size(codecs,2),size(bitrates,2));
 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:size(bitrates,2)
              filename = strcat('../results/multi_generation/',codecs{i},'/psnr_',picture_set{a},'_',codecs{i},'_',...
                  num2str(bitrates(q)),'bpp_',color_spaces{a},'_',chroma_subs{a},'_',bit_depths{a},'b_',image_sizes{a},'_r',num2str(gen_number),'.dat');
              
              if exist(filename, 'file') == 2
                  contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
                  PSNR = contentTable{:,2};
                    if(bit_depths{a} == '10')
                          %PSNR(PSNR==Inf) = 136; %125dB corresponds to inf
													dynamic = 1024-1;
										elseif(bit_depths{a} == '8')
                          %PSNR(PSNR==Inf) = 125;
													dynamic = 256-1;
										end	
									%infPSNR = (PSNR==Inf)
                  PSNRtab = array2table(PSNR);
                  tablePSNR{i,a,q} = table2cell(PSNRtab);

									MSE=dynamic.^2./(10.^(PSNR./10.0));
									MSE(PSNR==Inf) = 0;
									meanMSE = mean(MSE);
		
									arrayMean(i,a,q) = 10*log10(dynamic^2/meanMSE);
									arrayMeanMSE(i,a,q) = meanMSE;
									if(bit_depths{a} == '10')
                          arrayMean(arrayMean==Inf) = 136; %125dB corresponds to inf
												
										elseif(bit_depths{a} == '8')
                          arrayMean(arrayMean==Inf) = 125;

										end	
                  %disp(strcat('ok',codecs{i},picture_set{a},num2str(bitrates(q))));
              else
                  tablePSNR{i,a,q} = {'0'};
                  arrayMean(i,a,q) = 0;
									arrayMeanMSE(i,a,q) = Inf;
                  disp(strcat(filename,' unavailable'));
              end
          end
          
     end
     for q=1:size(bitrates,2)
					MSEseq = arrayMeanMSE(i,:,q);
					meanMSEseq = mean(MSEseq);
					arrayMeanSeq(i,q) = 10*log10(dynamic^2/meanMSEseq);
					if(bit_depths{a} == '10')
		        	arrayMeanSeq(arrayMeanSeq==Inf) = 136; %125dB corresponds to inf											
					elseif(bit_depths{a} == '8')
		          arrayMeanSeq(arrayMeanSeq==Inf) = 125;
					end	
					if(meanMSEseq==Inf)
						arrayMeanSeq(i,q) = 0;
					end
         %arrayMeanSeq(i,q) = mean(squeeze(arrayMean(i,:,q)));
     end
 end
 
 
mkdir('../graphics/single_generation');
codecs_legend = strrep(codecs, '_', '\_');
codecs_legend = strrep(codecs_legend, '97', 'XT');
picture_set_titles=strrep(picture_set, '_', '\_');
%codecs_legend = {'JP2K ULL' 'JP2K ULLC'};
charttype = {'-o' '-x' '-*' '-.' '-+' '-^' '-p' '-h'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'Position', [800 800 1000 600]);

      xlabel('Output bitrates (in bpp)','Fontsize',18);
      ylabel('PSNR (in dB)','Fontsize',18);        
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMean(i,a,:));
          plotBitrates = bitrates;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotBitrates(ix)=[];
          hold on
					plotMean = plotMean-25;
          plot(plotBitrates,plotMean,charttype{i},'LineWidth',2);
					%semilogy(plotBitrates,plotMean,charttype{i},'LineWidth',2);
      end
			grid on;
			axis(axislimit(a,:));
      legend(codecs_legend{:},'Location','northwest');
			set(gca,'fontsize',18);
      title(strcat('Single gen. for image set "',picture_set_titles{a},'" at gen.',{' '},num2str(gen_number)));
			filename=strcat('../graphics/single_generation/',picture_set{a},'_g',num2str(gen_number),'.jpeg');
			set(gca,'yticklabel',yoffset(a,:));
			set(gca,'yscale','log');
			hgexport(gcf, filename, hgexport('factorystyle'), 'Format', 'jpeg');
  end



%for mean on all image sets
fig = figure;
set(fig, 'Position', [800 800 1000 600]);
xlabel('Output bitrates (in bpp)','Fontsize',18);
ylabel('PSNR (in dB)');
for i=1:size(codecs,2)
		plotMean = squeeze(arrayMeanSeq(i,:));
     plotBitrates = bitrates;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotBitrates(ix)=[];
     hold on
			plotMean = plotMean-25;
     plot(plotBitrates,plotMean,charttype{i},'LineWidth',2);
		 %semilogy(plotBitrates,plotMean%,charttype{i},'LineWidth',2);
end
grid on;
axis(axislimitmean);

set(gca,'fontsize',18);
legend(codecs_legend{:},'Location','northwest');
title(strcat('Mean single generation results (',image_sizes{a},{' '},color_spaces{a},{' '},chroma_subs{a},{' '},bit_depths{a},'-bit images) at gen.',{' '},num2str(gen_number)));
set(gca,'yticklabel',yoffsetmean);
set(gca,'yscale','log');
hgexport(gcf, strcat('../graphics/single_generation/mean_',image_sizes{a},color_spaces{a},chroma_subs{a},bit_depths{a},'_g',num2str(gen_number),'.jpeg'), hgexport('factorystyle'), 'Format', 'jpeg');
 

