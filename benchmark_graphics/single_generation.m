close all

arrayMean = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMeanSeq = NaN(size(codecs,2),size(bitrates,2));
 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:size(bitrates,2)
              filename = strcat('../results/single_generation/',codecs{i},'/psnr_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp.dat');
              
              if exist(filename, 'file') == 2
                  contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
									name=contentTable{:,1};
									toDelete=find(ismember(name, '!!!'));
                  PSNR = contentTable{:,2};
									PSNR(toDelete) = [];
									name(toDelete) = [];
									if(strcmp(name(size(PSNR,1)),'NumberSizeExceeded'))
										numberExceed = PSNR(size(PSNR,1));
										PSNR = PSNR(1:size(PSNR,1)-1);
									else
										numberExceed = NaN;
									end
									if size(contentTable,2) >= 4
										realSizes = contentTable{:,3};
										realSizes = realSizes(1:size(realSizes,1)-1);
										realSizes(toDelete) = [];
										targetSizes = contentTable{:,4};
										targetSizes = targetSizes(1:size(targetSizes,1)-1);
										targetSizes(toDelete) = [];
										%numberExceed = nnz(targetSizes < realSizes);
									end
									
                    if(bit_depths{a} == '10')
													dynamic = 1024-1;
										elseif(bit_depths{a} == '8')
													dynamic = 256-1;
										elseif(bit_depths{a} == '12')
													dynamic = 2^12-1;
										end	

									MSE=dynamic.^2./(10.^(PSNR./10.0));
									MSE(PSNR==Inf) = 0;
									meanMSE = mean(MSE);
		
									arrayMean(i,a,q) = 10*log10(dynamic^2/meanMSE);
									arrayMeanMSE(i,a,q) = meanMSE;
									if(bit_depths{a} == '10')
                          arrayMean(arrayMean==Inf) = 136; 		
										elseif(bit_depths{a} == '8')
                          arrayMean(arrayMean==Inf) = 125; %125dB corresponds to inf
										elseif(bit_depths{a} == '12')
                          arrayMean(arrayMean==Inf) = 141; %125dB corresponds to inf
										end	
                  %disp(strcat('ok',codecs{i},picture_set{a},num2str(bitrates(q))));
              else
                  arrayMean(i,a,q) = 0;
									arrayMeanMSE(i,a,q) = Inf;
                  disp(strcat(filename,' unavailable'));
              end
          end
          
     end
     for q=1:size(bitrates,2)
					MSEseq = arrayMeanMSE(i,:,q);
					meanMSEseq = mean(MSEseq);
					arrayMeanSeq(i,q) = 10*log10(dynamic^2/meanMSEseq);
					if(bit_depths{a} == '10')
		        	arrayMeanSeq(arrayMeanSeq==Inf) = 136; %125dB corresponds to inf											
					elseif(bit_depths{a} == '8')
		          arrayMeanSeq(arrayMeanSeq==Inf) = 125;
					elseif(bit_depths{a} == '12')
							arrayMeanSeq(arrayMeanSeq==Inf) = 141;
					end	
					if(meanMSEseq==Inf)
						arrayMeanSeq(i,q) = 0;
					end
     end
 end
 
 
mkdir('../graphics/single_generation');
codecs_legend = codecs;
picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-x' '-*' '-.' '-+' '-^' '-p'};
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'Position', [800 800 950 600]);

      xlabel('Output bitrates (in bpp)','Fontsize',18);
      ylabel('PSNR (in dB)','Fontsize',18);        
      for i=1:size(codecs,2)
          plotMean = squeeze(arrayMean(i,a,:));
          plotBitrates = bitrates;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotBitrates(ix)=[];
          hold on
          plot(plotBitrates,plotMean,charttype{i},'LineWidth',2);
      end
			grid on;
			%axis(axislimit(a,:));
      legend(codecs_legend{:},'Location','northwest');
      title(strcat('Single generation results for image set "',picture_set_titles{a},'"'));
			filename=strcat('../graphics/single_generation/',picture_set{a},'.jpeg');
			set(gca,'fontsize',18);
			hgexport(gcf, filename, hgexport('factorystyle'), 'Format', 'jpeg');
  end



%for mean on all image sets
%fig = figure;
%set(fig, 'Position', [800 800 950 600]);
%xlabel('Output bitrates (in bpp)','Fontsize',18);
%ylabel('PSNR (in dB)');
%for i=1:size(codecs,2)
%		plotMean = squeeze(arrayMeanSeq(i,:));
%     plotBitrates = bitrates;
%     ix=(plotMean == 0);
%     plotMean(ix)=[];    
%     plotBitrates(ix)=[];
%     hold on
%     plot(plotBitrates,plotMean,charttype{i},'LineWidth',2);
%end
%grid on;
%axis(axislimitmean);
%legend(codecs_legend{:},'Location','northwest');
%title(strcat('Mean single generation results (',image_sizes{a},{' '},color_spaces{a},{' '},chroma_subs{a},{' '},bit_depths{a},'-bit images)'));
%set(gca,'fontsize',18);
%hgexport(gcf, strcat('../graphics/single_generation/mean_',image_sizes{a},color_spaces{a},chroma_subs{a},bit_depths{a},'.jpeg'), hgexport('factorystyle'), 'Format', 'jpeg');
 

