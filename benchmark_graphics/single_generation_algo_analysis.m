close all

arrayMean = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean0 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean1 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMean2 = zeros(size(codecs,2),size(picture_set,2),size(bitrates,2));
arrayMeanSeq = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq0 = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq1 = NaN(size(codecs,2),size(bitrates,2));
arrayMeanSeq2 = NaN(size(codecs,2),size(bitrates,2));

seqname = repmat({'TEST'}, size(codecs,2),size(picture_set,2),size(bitrates,2));


 for i=1:size(codecs,2)
     for a=1:size(picture_set,2)
          for q=1:size(bitrates,2)
              filename = strcat('../results/single_generation/',codecs{i},'/psnr_',picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r1.dat');
							seqname{i,a,q} = strcat(picture_set{a},'_sb',content_dirs_sb_factors{a},'_',codecs{i},'_',num2str(bitrates(q)),'bpp_r1');
              
              if exist(filename, 'file') == 2
                  contentTable = readtable(filename,'ReadVariableNames',false,'Delimiter',' ');
									name=contentTable{:,1};
									toDelete=find(ismember(name, '!!!'));

									PSNR = contentTable{:,2};

									PSNR0 = contentTable{:,3};
									PSNR1 = contentTable{:,4};
									PSNR2 = contentTable{:,5};

									PSNR(toDelete) = [];
									PSNR0(toDelete) = [];
									PSNR1(toDelete) = [];
									PSNR2(toDelete) = [];
									name(toDelete) = [];
									if(strcmp(name(size(PSNR,1)),'NumberSizeExceeded'))
										numberExceed = PSNR(size(PSNR,1));
										PSNR = PSNR(1:size(PSNR,1)-1);
										PSNR0 = PSNR0(1:size(PSNR0,1)-1);
										PSNR1 = PSNR1(1:size(PSNR1,1)-1);
										PSNR2 = PSNR2(1:size(PSNR2,1)-1);
									else
										numberExceed = NaN;
									end
									if size(contentTable,2) >= 7
										realSizes = contentTable{:,6};
										realSizes = realSizes(1:size(realSizes,1)-1);
										realSizes(toDelete) = [];
										targetSizes = contentTable{:,7};
										targetSizes = targetSizes(1:size(targetSizes,1)-1);
										targetSizes(toDelete) = [];
										%numberExceed = nnz(targetSizes < realSizes);
									end
									
                    if(bit_depths{a} == '10')
													dynamic = 1024-1;
										elseif(bit_depths{a} == '8')
													dynamic = 256-1;
										elseif(bit_depths{a} == '12')
													dynamic = 2^12-1;
										end	

									MSE=dynamic.^2./(10.^(PSNR./10.0));
									MSE(PSNR==Inf) = 0;
									meanMSE = mean(MSE);
									arrayMean(i,a,q) = 10*log10(dynamic^2/meanMSE);
									arrayMeanMSE(i,a,q) = meanMSE;

									MSE0=dynamic.^2./(10.^(PSNR0./10.0));
									MSE0(PSNR0==Inf) = 0;
									meanMSE0 = mean(MSE0);
									arrayMean0(i,a,q) = 10*log10(dynamic^2/meanMSE0);
									arrayMeanMSE0(i,a,q) = meanMSE0;

									MSE1=dynamic.^2./(10.^(PSNR1./10.0));
									MSE1(PSNR1==Inf) = 0;
									meanMSE1 = mean(MSE1);
									arrayMean1(i,a,q) = 10*log10(dynamic^2/meanMSE1);
									arrayMeanMSE1(i,a,q) = meanMSE1;

									MSE2=dynamic.^2./(10.^(PSNR2./10.0));
									MSE2(PSNR2==Inf) = 0;
									meanMSE2 = mean(MSE2);
									arrayMean2(i,a,q) = 10*log10(dynamic^2/meanMSE2);
									arrayMeanMSE2(i,a,q) = meanMSE2;

              else
                  arrayMean(i,a,q) = 0;
									arrayMeanMSE(i,a,q) = Inf;

                  arrayMean0(i,a,q) = 0;
									arrayMeanMSE0(i,a,q) = Inf;

                  arrayMean1(i,a,q) = 0;
									arrayMeanMSE1(i,a,q) = Inf;

                  arrayMean2(i,a,q) = 0;
									arrayMeanMSE2(i,a,q) = Inf;
                  disp(strcat(filename,' unavailable'));
              end
          end
          
     end
     for q=1:size(bitrates,2)
					MSEseq = arrayMeanMSE(i,:,q);
					meanMSEseq = mean(MSEseq);
					arrayMeanSeq(i,q) = 10*log10(dynamic^2/meanMSEseq);

					MSEseq0 = arrayMeanMSE0(i,:,q);
					meanMSEseq0 = mean(MSEseq0);
					arrayMeanSeq0(i,q) = 10*log10(dynamic^2/meanMSEseq0);

					MSEseq1 = arrayMeanMSE1(i,:,q);
					meanMSEseq1 = mean(MSEseq1);
					arrayMeanSeq1(i,q) = 10*log10(dynamic^2/meanMSEseq1);

					MSEseq2 = arrayMeanMSE2(i,:,q);
					meanMSEseq2 = mean(MSEseq2);
					arrayMeanSeq2(i,q) = 10*log10(dynamic^2/meanMSEseq2);

					if(meanMSEseq==Inf)
						arrayMeanSeq(i,q) = 0;
					end

					if(meanMSEseq0==Inf)
						arrayMeanSeq0(i,q) = 0;
					end

					if(meanMSEseq1==Inf)
						arrayMeanSeq1(i,q) = 0;
					end

					if(meanMSEseq2==Inf)
						arrayMeanSeq2(i,q) = 0;
					end
     end
 end
 
arrayMeanGraph = arrayMean;
if(bit_depths{a} == '10')
      arrayMeanGraph(arrayMeanGraph==Inf) = 136; 		
elseif(bit_depths{a} == '8')
      arrayMeanGraph(arrayMeanGraph==Inf) = 125; %125dB corresponds to inf
elseif(bit_depths{a} == '12')
      arrayMeanGraph(arrayMeanGraph==Inf) = 141; %125dB corresponds to inf
end	


arrayMeanSeqGraph = arrayMeanSeq;
if(bit_depths{a} == '10')
  	arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 136; %125dB corresponds to inf										
elseif(bit_depths{a} == '8')
    arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 125;
elseif(bit_depths{a} == '12')
		arrayMeanSeqGraph(arrayMeanSeqGraph==Inf) = 141;
end	
 
mkdir('../graphics/single_generation_memory_requirement');

bitrates_legend=cell(size(bitrates,2),1);
for b=1:size(bitrates,2)
	bitrates_legend{b,1} = [num2str(bitrates(b)) ' bpp'];
end

picture_set_titles=strrep(picture_set, '_', '\_');
charttype = {'-o' '-+'  '-*' '-x' '-s' '-d' '-^' '-v' '-<' '->' ':o' ':p' ':h'};
%FOR memory requirement
for w=1:size(codecs,2)
		textboxMR{2*w-1} = strcat(strrep(strrep(codecs{w}, 'E4_', ''), '_XSM', ''),': ');
		textboxMR{2*w} = strcat(num2str(memory_requirement(w)),' kB');
end
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'OuterPosition', [50 50 1600 900]);
      xlabel('Total memory requirement at encoder and decoder (in kBytes)','Fontsize',14);
      ylabel('PSNR (in dB)','Fontsize',14);        
      for i=1:size(bitrates,2)
          plotMean = squeeze(arrayMeanGraph(:,a,i));
          plotMR = memory_requirement;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotMR(ix)=[];
          hold on
          plot(plotMR,plotMean,charttype{i},'LineWidth',2);
      end
			grid on;
			MyBox = uicontrol('style','text');
			set(MyBox,'String',textboxMR);
			set(MyBox,'Position',[1255,400,500,350],'BackgroundColor','white','HorizontalAlignment','left','Fontsize',14);
			legend(bitrates_legend,'Location','southeastoutside','Fontsize',12);
      title(strcat('Single generation results with memory requ. for image set "',picture_set_titles{a},'"'));
			filename=strcat('../graphics/single_generation_memory_requirement/',picture_set{a},'MR.png');
			set(gca,'fontsize',14);
			mystyle = hgexport('factorystyle');
			mystyle.Width = 1600;
			mystyle.Height = 900;
			mystyle.Units = 'pixels';
			mystyle.Resolution = 200;
			hgexport(gcf, filename, mystyle, 'Format', 'png');
  end

mkdir('../graphics/single_generation_latency_requirement');
%FOR latency requirement
for w=1:size(codecs,2)
		textboxLR{2*w-1} = strcat(strrep(strrep(codecs{w}, 'E4_', ''), '_XSM', ''),': ');
		textboxLR{2*w} = strcat(num2str(latency_requirement(w)),' lines');
end
%for value for each image set
  for a=1:size(picture_set,2)
      fig = figure;
			set(fig, 'OuterPosition', [50 50 1600 900]);
      xlabel('Total latency requirement at encoder and decoder (in lines)','Fontsize',14);
      ylabel('PSNR (in dB)','Fontsize',14);        
      for i=1:size(bitrates,2)
          plotMean = squeeze(arrayMeanGraph(:,a,i));
          plotLR = latency_requirement;
          ix=(plotMean == 0);
          plotMean(ix)=[];    
          plotLR(ix)=[];
          hold on
          plot(plotLR,plotMean,charttype{i},'LineWidth',2);
      end
			grid on;
			MyBox = uicontrol('style','text');
			set(MyBox,'String',textboxLR);
			set(MyBox,'Position',[1255,400,500,350],'BackgroundColor','white','HorizontalAlignment','left','Fontsize',14);
			legend(bitrates_legend,'Location','southeastoutside','Fontsize',12);
      title(strcat('Single generation results with latenct requ. for image set "',picture_set_titles{a},'"'));
			filename=strcat('../graphics/single_generation_latency_requirement/',picture_set{a},'LR.png');
			set(gca,'fontsize',14);
			mystyle = hgexport('factorystyle');
			mystyle.Width = 1600;
			mystyle.Height = 900;
			mystyle.Units = 'pixels';
			mystyle.Resolution = 200;
			hgexport(gcf, filename, mystyle, 'Format', 'png');
  end


%for mean on all image sets memory req
fig = figure;
set(fig, 'OuterPosition', [50 50 1600 900]);
xlabel('Total memory requirement at encoder and decoder (in kBytes)','Fontsize',14);
ylabel('PSNR (in dB)','Fontsize',14);   
for i=1:size(bitrates,2)
		plotMean = squeeze(arrayMeanSeqGraph(:,i));
    plotMR = memory_requirement;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotMR(ix)=[];
     hold on
     plot(plotMR,plotMean,charttype{i},'LineWidth',2);
end
grid on;
legend(bitrates_legend,'Location','southeastoutside','Fontsize',12);
title(strcat('Mean single generation results with memory requ. (',color_spaces{a},{' '},chroma_subs{a},{' '},num2str(bit_depths{a}),'-bit images)'));
set(gca,'fontsize',14);
MyBox = uicontrol('style','text');
set(MyBox,'String',textboxMR);
set(MyBox,'Position',[1255,400,500,350],'BackgroundColor','white','HorizontalAlignment','left','Fontsize',14);

mystyle = hgexport('factorystyle');
mystyle.Width = 1600;
mystyle.Height = 900;
mystyle.Units = 'pixels';
mystyle.Resolution = 200;
hgexport(gcf, strcat('../graphics/single_generation_memory_requirement/mean_',color_spaces{a},chroma_subs{a},num2str(bit_depths{a}),'bMR.png'),mystyle, 'Format', 'png');

%for mean on all image sets latency req
fig = figure;
set(fig, 'OuterPosition', [50 50 1600 900]);
xlabel('Total latency requirement at encoder and decoder (in lines)','Fontsize',14);
ylabel('PSNR (in dB)','Fontsize',14);   
for i=1:size(bitrates,2)
		plotMean = squeeze(arrayMeanSeqGraph(:,i));
    plotLR = latency_requirement;
     ix=(plotMean == 0);
     plotMean(ix)=[];    
     plotLR(ix)=[];
     hold on
     plot(plotLR,plotMean,charttype{i},'LineWidth',2);
end
grid on;
legend(bitrates_legend,'Location','southeastoutside','Fontsize',12);
title(strcat('Mean single generation results with latency requ. (',color_spaces{a},{' '},chroma_subs{a},{' '},num2str(bit_depths{a}),'-bit images)'));
set(gca,'fontsize',14);
MyBox = uicontrol('style','text');
set(MyBox,'String',textboxLR);
set(MyBox,'Position',[1255,400,500,350],'BackgroundColor','white','HorizontalAlignment','left','Fontsize',14);

mystyle = hgexport('factorystyle');
mystyle.Width = 1600;
mystyle.Height = 900;
mystyle.Units = 'pixels';
mystyle.Resolution = 200;
hgexport(gcf, strcat('../graphics/single_generation_latency_requirement/mean_',color_spaces{a},chroma_subs{a},num2str(bit_depths{a}),'bLR.png'),mystyle, 'Format', 'png');






