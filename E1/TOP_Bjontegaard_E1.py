from __future__ import division
from math import log10
import sys
sys.path.insert(0, '../benchmark_graphics')
from bjontegaard_metric import *
import csv 
import time
import os 
import os.path
import numpy as np


psnrOrVisual=sys.argv[1]

if psnrOrVisual == 'psnr':
  codecs=np.array(['E1_XSM_psnr_labr0_ref', 'E1_XSM_psnr_labr0_zrm', 'E1_XSM_psnr_labr0_zrm_nozrf', 'E1_XSM_psnr_labr0_zrn', 'E1_XSM_psnr_labr0_zrn_nozrf', 'E1_XSM_psnr_labr0_ztc', 'E1_XSM_psnr_labr0_ztc_nozrf'])
elif psnrOrVisual == 'visual':
  codecs=np.array(['E1_XSM_visual_labr0_ref', 'E1_XSM_visual_labr0_zrn', 'E1_XSM_visual_labr0_zrn_nozrf', 'E1_XSM_visual_labr0_zrm', 'E1_XSM_visual_labr0_zrm_nozrf'])
else:
	print('Do not forget to select psnr or visual')
	sys.exit()

picture_set=np.array(['Tools_1520x1200_8b', 'HintergrundMusik_1920x1080_8b', 'FemaleStripedHorseFly_1920x1080_8b', 'RICHTER_ScreenContent2_4096x2160p_60_8b_sRGB_444_00001',  'ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040', 'HUAWEI_ScMap_1280x720p_60_8b_sRGB_444_000', 'APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444_000', 'RICHTER_ScreenContent_4096x2160p_15_8b_sRGB_444_0059', 'ARRI_AlexaDrums_3840x2160p_24_10b_bt709_444_00162', 'BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_00004606', 'EBU_PendulusWide_3840x2160p_50_10b_bt709_444_0001', 'ARRI_AlexaHelicopterView_3840x2160p_24_12b_P3_444_00018', 'ARRI_Lake2_2880x1620p_24_10b_bt709_422_0040', 'VQEG_CrowdRun_3840x2160p_50_10b_bt709_422_07111', 'ARRI_AlexaDrums_3840x2160p_24_12b_P3_422_00162'])
content_dirs_sb_factors=np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
color_spaces=np.array(['RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'RGB', 'YCbCr', 'YCbCr', 'YCbCr'])
chroma_subs=np.array(['444', '444', '444', '444', '444', '444', '444', '444', '444', '444', '444', '444', '422', '422', '422'])
bit_depths=np.array([8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 12, 10, 10, 12])
image_sizes=np.array(['1520x1200', '1920x1080', '1920x1080', '4096x2160', '2880x1620', '1280x720', '2560x1440', '4096x2160', '3840x2160', '4096x1744', '3840x2160', '3840x2160', '2880x1620', '3840x2160'])
bitrates=np.array([3, 4, 5, 6, 8, 10, 12, 14])
gen_number=1


logname='/Bjontegaard_'+psnrOrVisual+'_g'+str(gen_number)+'.dat'

startPath='../results/multi_generation/'
outPath='./Bjontegaard'
numToCompare=len(codecs)
BR=np.zeros((len(picture_set), numToCompare, len(bitrates)))
PSNR=np.zeros((len(picture_set), numToCompare, len(bitrates)))

if not os.path.exists(outPath):
	os.makedirs(outPath)

for a in range(0, len(picture_set)):
	for q in range(0, len(bitrates)):
		for i in range(0, len(codecs)):
			filename = startPath+codecs[i]+'/psnr_'+picture_set[a]+'_sb'+str(content_dirs_sb_factors[a])+'_'+codecs[i]+'_'+str(bitrates[q])+'bpp_r'+str(gen_number)+'.dat'
			if not os.path.isfile(filename):
					print filename+' does not exist'
			#seqname= picture_set[a]+'_sb'+str(content_dirs_sb_factors[a])+'_'+codecs[i]+'_'+str(bitrates[q])+'bpp_r'+str(gen_number)
			#print filename
			psnrTab = []
			with open(filename) as f:
				for line in f:
					line = line.split()
					if line[0] != 'NumberSizeExceeded':
						psnrVal=float(line[1])
						psnrTab.append(psnrVal)
			psnrMean=np.mean(psnrTab)
			BR[a][i][q]=bitrates[q]
			PSNR[a][i][q]=psnrMean	

#print BR
#print PSNR

bd_psnr=np.zeros((numToCompare, len(picture_set)))
bd_rate=np.zeros((numToCompare, len(picture_set)))

log = open(outPath+logname,'w')
#loop that compute the Bjondegaard metric of each config wrt ref
for a in range(0, len(picture_set)):
	#log.write(picture_set[a]+'\n')
	for i in range(0, len(codecs)):
			#fbcConfig=codecs[i]+' vs '+codecs[0]
			#log.write('---- '+fbcConfig+'\n')
			#bd_psnr=BD_PSNR(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);	
			#bd_rate=BD_RATE(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);
			#log.write('--------- BD_PSNR: '+str(bd_psnr)+' dB \n')  	
			#log.write('--------- BD_RATE: '+str(bd_rate)+'\n')  	
			bd_psnr[i][a] = BD_PSNR(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);	
			bd_rate[i][a] = BD_RATE(BR[a][0], PSNR[a][0], BR[a][i], PSNR[a][i]);

#print the data in a table
log.write('BD PSNR [dB]\n')
log.write('. ') 
for i in range(0, len(codecs)):
	log.write(codecs[i]+' ')
log.write('\n')  	
for a in range(0, len(picture_set)):
	log.write(picture_set[a]+' ')
	for i in range(0, len(codecs)):
		log.write(str(round(bd_psnr[i][a],4))+' ')
	log.write('\n')  	

log.write('\n\n')  	

log.write('BD RATE [%] \n')
log.write('. ') 
for i in range(0, len(codecs)):
	log.write(codecs[i]+' ')
log.write('\n')  	
for a in range(0, len(picture_set)):
	log.write(picture_set[a]+' ')
	for i in range(0, len(codecs)):
		log.write(str(round(bd_rate[i][a],4))+' ')
	log.write('\n')   	
		



