#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C

#a number that is only used to identify the log of the test
testnumber=1

# either singlegen multigen or errortest
test_type=singlegen

#list of codecs to test 
codecs=(j2kullc vc2hqcbr jpeg hevc)

# list of bitrates to test  (in bpp)
bitrates=(6)

#list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
content_dirs=(/export/image_content/JPEG_XS_test_material/sequences/APPLE_BasketBallScreen_2560x1440p_60_8b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaDrums_3840x2160p_24_12b_logC_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaDrums_3840x2160p_24_12b_P3_422 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaDrums_3840x2160p_24_12b_P3_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaHelicopterView_3840x2160p_24_12b_logC_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaHelicopterView_3840x2160p_24_12b_P3_422 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_AlexaHelicopterView_3840x2160p_24_12b_P3_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_Lake2_2880x1620p_24_8b_bt709_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_Lake2_2880x1620p_24_10b_bt709_422 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_PublicUniversity_2880x1620p_24_8b_bt709_444 \
/export/image_content/JPEG_XS_test_material/sequences/ARRI_PublicUniversity_2880x1620p_24_10b_bt709_422 \
/export/image_content/JPEG_XS_test_material/sequences/BLENDER_Sintel1_4096x1744p_24_8b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/BLENDER_TearsOfSteel_4096x1714p_24_12b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/HUAWEI_ScMap_1280x720p_60_8b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/RICHTER_ScreenContent_4096x2160p_15_8b_sRGB_444 \
/export/image_content/JPEG_XS_test_material/sequences/VQEG_CrowdRun_3840x2160p_50_8b_bt709_444 \
/export/image_content/JPEG_XS_test_material/sequences/VQEG_CrowdRun_3840x2160p_50_10b_bt709_422 \
/export/image_content/JPEG_XS_test_material/sequences/VQEG_ParkJoy_3840x2160p_50_8b_bt709_444 \
/export/image_content/JPEG_XS_test_material/sequences/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422)

#one file on ${content_dirs_subsampling_factor} is processed in the tests
content_dirs_sb_factors=(1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)
# either RGB or YCbCr
color_spaces=(RGB RGB YCbCr RGB RGB YCbCr RGB RGB YCbCr RGB YCbCr RGB RGB RGB RGB RGB RGB YCbCr RGB YCbCr)
# either 444 or 422
chroma_subs=(444 444 422 444 444 422 444 444 422 444 422 444 444 444 444 444 444 422 444 422)
# either 8, 10 or 12 bits
bit_depths=(8 12 12 12 12 12 12 8 10 8 10 8 10 12 8 8 8 10 8 10)
# WIDTHxHEIGHT
image_sizes=(2560x1440 3840x2160 3840x2160 3840x2160 3840x2160 3840x2160 3840x2160 2880x1620 2880x2160 2880x1620 2880x2160 4096x1744 4096x1744 4096x1714 1280x720 4096x2160 3840x2160 3840x2160 3840x2160 3840x2160)
# only used for multigen : number of encoding/decoding cycles to perform
niter=10
# only used for multigen : =1 if the comparison must be made wrt the original picture and =0 if the comparison is made wrt the input of each generation
comparison_with_original=1
# only used for error : number of random bit flip to be tested
nerrors=10
error_offset=(0)
# Only for HEVC SCC: 999 correspond to no forced Qp
forcedQp=999
# The type of edition if any
edition_type="pixel_shift"
edition_config="1"

#-----------------------------------------------------------------------------

source benchmark/paths.sh
mkdir -p log_files
logfile="./log_files/log_${testnumber}.dat"
echo -n "" >  ${logfile}
for ((a=0; a<${#codecs[@]}; ++a)); do
    for ((b=0; b<${#content_dirs[@]}; ++b)); do
        for ((c=0; c<${#bitrates[@]}; ++c)); do
					echo "Processing step: ${test_type} codec ${codecs[$a]} bitrate ${bitrates[$c]} content_dir ${content_dirs[$b]}"
					echo -n "Processing step: codec ${codecs[$a]} bitrate ${bitrates[$c]} content_dir ${content_dirs[$b]}" >> ${logfile}
					if [ ${test_type} = "singlegen" ]; then
						bash benchmark/singlegen.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} 1>>${logfile} 2>>${logfile}
					elif [ ${test_type} = "multigen" ]; then 
						bash benchmark/multigen.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${niter} ${comparison_with_original} 1>>${logfile} 2>>${logfile}
					elif [ ${test_type} = "multigen_edition" ]; then 
						bash benchmark/multigen_edition.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${niter} ${comparison_with_original} ${edition_type} ${edition_config} 1>>${logfile} 2>>${logfile}
					elif [ ${test_type} = "errortest" ]; then 
						bash benchmark/errortest.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} ${nerrors} ${error_offset[$b]} ${forcedQp} 1>>${logfile} 2>>${logfile}
					else
						echo This test type does not exist
					fi
        done
    done
done
