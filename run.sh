#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2017  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C
#to be put in the command line depending on what is configured in the ./benchmark folder
codec=$1

path=/data/image_content/JPEG_XS_test_material/raw_bayer/pgm/all
#path=/data/image_content/JPEG_XS_test_material/raw_bayer/pgm/one


#a number that is only used to identify the log of the test
testnumber="${codec}"

# either singlegen or multigen
test_type=singlegen

#list of codecs to test 
codecs=(${codec})

# list of bitrates to test  (in bpp)
bitrates=(1 2 3 4 5 6 7 8 9 10 11 12)
#folder containing the pictures
content_dirs=${path}
# only used for multigen : number of encoding/decoding cycles to perform
niter=7

#-----------------------------------------------------------------------------

source benchmark/paths.sh
mkdir -p log_files
logfile="./log_files/log_${testnumber}.dat"
echo -n "" >  ${logfile}
for ((a=0; a<${#codecs[@]}; ++a)); do
	for ((c=0; c<${#bitrates[@]}; ++c)); do
		echo "Processing step: ${test_type} codec ${codecs[$a]} bitrate ${bitrates[$c]} content_dir ${content_dirs}"
		echo -n "Processing step: codec ${codecs[$a]} bitrate ${bitrates[$c]} content_dir ${content_dirs}" >> ${logfile}
		if [ ${test_type} = "singlegen" ]; then
			bash benchmark/singlegen.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs} 1>>${logfile} 2>>${logfile}
		elif [ ${test_type} = "multigen" ]; then 
			bash benchmark/multigen.sh ${codecs[$a]} ${bitrates[$c]} ${content_dirs} ${niter} 1>>${logfile} 2>>${logfile}
		else
			echo This test type does not exist
		fi
        done
done
