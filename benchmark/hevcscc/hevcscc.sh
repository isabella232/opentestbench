#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)

#!/bin/bash
export LANG=C

source benchmark/paths.sh

function hevcscc_RGB_444
{
	qpsubsamplingfactor=50
  local min
  local max
  bpp=$1
	#heuristic to estimate the range of qp to test (a good and short range makes the algo quicker)
	if [ $(bc <<< "${bpp}>=12") = 1 ] && [ $(bc <<< "${bpp}<100") = 1 ]; then 
		min=0
  	max=8
	elif [ $(bc <<< "${bpp}>=8") = 1 ] && [ $(bc <<< "${bpp}<12") = 1 ]; then 
		min=0
  	max=8
	elif [ $(bc <<< "${bpp}>=5") = 1 ] && [ $(bc <<< "${bpp}<8") = 1 ]; then 
		min=0
  	max=8
	else
		min=0
  	max=16
	fi
	bit_depth=$2
	if [ $(bc <<< "${bit_depth}==8") = 1 ]; then 
		bitdepthwithpadding=8
	else
		bitdepthwithpadding=16
	fi
  src_dir=$3
	src_dir_sb_factor=$4
	image_size=$5
	test_dir=${6}
	errorPos=$7
	numBits=$8
	extension=${9}
	errorsuffix=${10}
	shift 10
	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorTest=0
	else
			errorTest=1
	fi
	if [ ${errorTest} = 1 ]; then
		echo ERROR ! errortest was not implemented with HEVC SCC !
	fi
	fps=25
	width=${image_size/x*}
	height=${image_size#*x}
	origsize=$(bc <<< "3*${bitdepthwithpadding}*${width}*${height}/8")
  tmp_dir=$(mktemp -d /tmp/hevcscc_XXXXX)
	config_file=${HEVCSCCPATH}/encoder_intra_main_scc.cfg
	numFile=$(find ${src_dir} -type f -name '*.ppm' | wc -l)
	
	qpsetsize=0
	mkdir ${tmp_dir}/subset
	q=0
	i=0
	#create the subset of picture on which the qp will be computed
  for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
		if [ ${q} = 0 ]; then
			if [ ${i} = 0 ]; then
				g=${f##*/}
				name=${g/.*}
				test_file=${test_dir}/${name}_hevcscc_${bpp}bpp${errorsuffix}.${extension}
				if [ -f ${test_file} ]; then
		    	echo "Already there!"
		  	else
					${DIFFTESTPATH}/difftest_ng --convert ${tmp_dir}/subset/${name}.raw@${width}x${height}x3:[${bitdepthwithpadding}-=0]:[${bitdepthwithpadding}-=1]:[${bitdepthwithpadding}-=2] ${f} -
					mv ${tmp_dir}/subset/${name}.raw ${tmp_dir}/subset/${name}.rgb
					qpsetsize=$(bc <<< "(${qpsetsize}+1)")
				fi
			fi
			i=$(bc <<< "(${i}+1)%${qpsubsamplingfactor}")
		fi
		q=$(bc <<< "(${q}+1)%${src_dir_sb_factor}")
	done
	echo OrigSetSize ${numFile}
	echo QpSetSize ${qpsetsize}
	cat ${tmp_dir}/subset/*.rgb > ${tmp_dir}/inSubset.rgb
	local cur
  local lastvalid
	local lowBoundTouched=0
	local highBoundTouched=0
  local size
	local targetsize=$(bc <<< "${width}*${height}*${bpp}*${qpsetsize}/8")
	niter=0
  # Run a simple rate allocation by bisection
  #while [ "$cur" != "$last" ]; ---> an iter is not needed (except for Qp = 0)
	while [ $(bc <<< "${max}-${min}") != "1" ]; do
		cur=`echo "scale=0;($min+$max)/2" | bc`
		rm -rf ${tmp_dir}/temp.bin
		${HEVCSCCPATH}/TAppEncoderStatic -c ${config_file} -i ${tmp_dir}/inSubset.rgb -b ${tmp_dir}/temp.bin -o ${tmp_dir}/out.rgb -wdt ${width} -hgt ${height} --InputBitDepth=${bit_depth} --InternalBitDepth=${bit_depth} --FramesToBeEncoded=${qpsetsize} --FrameSkip=0 --FrameRate=${fps} --InputChromaFormat=444 --QP=$cur --InputColourSpaceConvert=RGBtoGBR --SNRInternalColourSpace=1 --OutputInternalColourSpace=0 --Level=6.2 #2>&1 > /dev/null
		size=$(wc -c <"${tmp_dir}/temp.bin")
		# bisection: Is it too large or too small?
		echo size ${size}
		echo targetsize ${targetsize}
		if [ `echo "$size > $targetsize" | bc` == "1" ]; then
				# rate is too large, lower the quality.
				echo current param $cur is too low, rate is too high, lower the quality. actual size : $size target size : $targetsize
				min=$cur
				lowBoundTouched=1
		else
				echo current param $cur is too high, rate is too low, increase the quality. actual size : $size target size : $targetsize
				max=$cur
				highBoundTouched=1
				lastvalid=${cur}
				echo lastvalid ${lastvalid}
		fi
		#specific for cur=0, when we want to leave the loop
		if [ ${max} == 0 ] && [ ${min} == 0 ]; then
				highBoundTouched=1
				lowBoundTouched=1
				max=1
				min=0
		fi
		niter=$(bc <<< "(${niter}+1)")
		#adapt the high bound if the guess on the range was not good
		if [ $(bc <<< "(${max}-${min})<= 1") == 1 ] && [ ${highBoundTouched} == "0" ]; then
				max=$(bc <<< "${max}+8")
		fi
		if [ $(bc <<< "(${max}-${min})<= 1") == 1 ] && [ ${lowBoundTouched} == "0" ]; then
				#if min=0, we should test cur=0 once				
				if [ ${min} == "0" ]; then 
					max=0
					min=0
				else
					min=$(bc <<< "${min}-5")
					#we dont want negative qp
					flagneg=$(bc <<< "${min}<0")
					if [ ${flagneg} == "1" ]; then 
						min=0
					fi
				fi
		fi
  done
	echo best ${lastvalid}
	mkdir ${tmp_dir}/planar
	q=0
	for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
		if [ ${q} = 0 ]; then
			g=${f##*/}
    	name=${g/.*}
			test_file=${test_dir}/${name}_hevcscc_${bpp}bpp${errorsuffix}.${extension}
			if [ -f ${test_file} ]; then
	    	echo "Already there!"
	  	else
				${DIFFTESTPATH}/difftest_ng --convert ${tmp_dir}/planar/${name}.raw@${width}x${height}x3:[${bitdepthwithpadding}-=0]:[${bitdepthwithpadding}-=1]:[${bitdepthwithpadding}-=2] ${f} -
			fi
		fi
		q=$(bc <<< "(${q}+1)%${src_dir_sb_factor}")
	done
	cat ${tmp_dir}/planar/*.raw > ${tmp_dir}/in.rgb 
	sizeTot=$(wc -c <"${tmp_dir}/in.rgb")
	numFiles=$(bc <<< "${sizeTot}/${origsize}")
	${HEVCSCCPATH}/TAppEncoderStatic -c ${config_file} -i ${tmp_dir}/in.rgb -b ${tmp_dir}/temp.bin -o ${tmp_dir}/out.rgb -wdt ${width} -hgt ${height} --InputBitDepth=${bit_depth} --InternalBitDepth=${bit_depth} --FramesToBeEncoded=${numFiles} --FrameSkip=0 --FrameRate=${fps} --InputChromaFormat=444 --QP=${lastvalid} --InputColourSpaceConvert=RGBtoGBR --SNRInternalColourSpace=1 --OutputInternalColourSpace=0 --Level=6.2 #2>&1 > /dev/null
	realTotalSize=$(wc -c <"${tmp_dir}/temp.bin")
	realSizeFloat=$(bc <<< "scale=4; ${realTotalSize}/${numFiles}")
	realSize=$(bc <<< "${realTotalSize}/${numFiles}")
	actualbpp=$(bc <<< "scale=4; ${realSizeFloat}/${width}/${height}*8")
	echo compressed bitstream size ${size} actual bpp ${actualbpp} target bpp ${bpp}
	targetSize=$(bc <<< "${bpp}*${width}*${height}/8")
	echo niter ${niter}
	mkdir ${tmp_dir}/out
	split -d -b ${origsize} ${tmp_dir}/out.rgb ${tmp_dir}/out/out
	outlist=( $(find -L ${tmp_dir}/out -type f|grep -v ".txt$"|sort) )	
	i=0
	q=0
 	for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
		if [ ${q} = 0 ]; then
		  g=${f##*/}
		  name=${g/.*}
			test_file=${test_dir}/${name}_hevcscc_${bpp}bpp${errorsuffix}.${extension}
			if [ -f ${test_file} ]; then
	    	echo "Already there!"
	  	else
				test_file=${test_dir}/${name}_hevcscc_${bpp}bpp${errorsuffix}_sc${realSize}x${targetSize}.${extension}
				origName=${outlist[$i]}		
				mv ${origName} ${origName}.raw
				${DIFFTESTPATH}/difftest_ng --pad ${bit_depth} ${test_file} ${origName}.raw@${width}x${height}x3:[${bitdepthwithpadding}-=0]:[${bitdepthwithpadding}-=1]:[${bitdepthwithpadding}-=2] -
				i=${i}+1
			fi
		fi
		q=$(bc <<< "(${q}+1)%${src_dir_sb_factor}")
  done
	rm -r ${tmp_dir}/*
	rmdir ${tmp_dir}
}




function hevcscc
{
  bpp=$1
  src_dir=$2
	src_dir_sb_factor=$3
  color_space=$4
	chroma_sub=$5
	bit_depth=$6
	image_size=$7
	test_dir=$8
	errorPos=$9
	numBits=${10}
	shift 10

	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
		extension=ppm
	elif [[ ("${color_space}" == "YCbCr") && ("${chroma_sub}" == "422") && (("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
		extension=yuv
	fi
	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorsuffix=
	else
			errorsuffix=_${errorPos/./_}
	fi

	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && ("${bit_depth}" == "8") ]]; then
		hevcscc_RGB_444 ${bpp} ${bit_depth} ${src_dir} ${src_dir_sb_factor} ${image_size} ${test_dir} ${errorPos} ${numBits} ${extension} ${errorsuffix}
	else
		echo This config is not available with HEVC SCC
	fi
}


# usage:
#   hevcscc.sh bpp src_dir src_dir_sb_factor color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)

bpp=$1
src_dir=$2
src_dir_sb_factor=$3
color_space=$4
chroma_sub=$5
bit_depth=$6
image_size=$7
test_dir=${8}
errorPos=$9
numBits=${10}
shift 10

if [ -z ${bpp} ] || [ -z ${src_dir} ] || [ -z ${src_dir_sb_factor} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${test_dir} ]; then
  echo "Usage: hevcscc.sh bpp src_dir src_dir_sb_factor color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)"
  exit 1
fi

if [ -z ${errorPos} ] && [ -z ${numBits} ]; then
	errorPos=0
	numBits=0
fi

hevcscc ${bpp} ${src_dir} ${src_dir_sb_factor} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${test_dir} ${errorPos} ${numBits}

