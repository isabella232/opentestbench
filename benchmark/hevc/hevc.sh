#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)

#!/bin/bash
export LANG=C

source benchmark/paths.sh

function hevc_YCbCr_422_10b
{
	qpsubsamplingfactor=3
  local min
  local max
  bpp=$1
	#heurestic to estimate the range of qp to test (a good and short range makes the algo quicker)
	if [ $(bc <<< "${bpp}>=10") ] && [ $(bc <<< "${bpp}<20") ]; then 
		min=2
  	max=8
	elif [ $(bc <<< "${bpp}>=8") ] && [ $(bc <<< "${bpp}<10") ]; then 
		min=6
  	max=16
	elif [ $(bc <<< "${bpp}>=5") ] && [ $(bc <<< "${bpp}<8") ]; then 
		min=9
  	max=25
	else
		min=12
  	max=30
	fi


  src_dir=$2
	image_size=$3
	test_dir=${4}
	errorPos=$5
	numBits=$6
	extension=${7}
	errorsuffix=${8}
	shift 9
	fps=25
	width=${image_size/x*}
	height=${image_size#*x}
	bitrate=$(bc <<< "${bpp}*${width}*${height}*${fps}")
	origsize=$(bc <<< "48*2/3*${width}*${height}/8")
	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorTest=0
	else
			errorTest=1
	fi
  tmp_dir=$(mktemp -d /tmp/hevc_XXXXX)
	config_file=${HEVCPATH}/encoder_intra_main_rext_mcuh16_slpl.cfg  
	numFile=$(find ${src_dir} -type f -name '*.raw' | wc -l)
	i=0
	qpsetsize=0
	mkdir ${tmp_dir}/subset
  for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
		if [ ${i} = 0 ]; then
		  g=${f##*/}
		  name=${g/.*}
			cp ${f} ${tmp_dir}/subset/${name}.${extension}
			qpsetsize=$(bc <<< "(${qpsetsize}+1)")
		fi
	i=$(bc <<< "(${i}+1)%${qpsubsamplingfactor}")
	done
	echo OrigSetSize ${numFile}
	echo QpSetSize ${qpsetsize}
	cat ${tmp_dir}/subset/*.${extension} > ${tmp_dir}/inSubset.yuv
	local cur
  local lastvalid
	local lowBoundMoved=0
	local highBoundMoved=0
  local size
	local targetsize=$(bc <<< "${width}*${height}*${bpp}*${qpsetsize}/8")
	niter=0
  # Run a simple rate allocation by bisection
  #while [ "$cur" != "$last" ]; do ---> an iter too much
	while [ $(bc <<< "${max}-${min}") != "1" ]; do
		cur=`echo "scale=0;($min+$max)/2" | bc`
		rm -rf ${tmp_dir}/temp.bin
		${HEVCPATH}/TAppEncoderStatic -c ${config_file} -i ${tmp_dir}/inSubset.yuv -b ${tmp_dir}/temp.bin -o ${tmp_dir}/out.yuv -wdt ${width} -hgt ${height} --InputBitDepth=10 --InternalBitDepth=10 --FramesToBeEncoded=${qpsetsize} --FrameSkip=0 --FrameRate=${fps} --InputChromaFormat=422 --QP=$cur 2>&1 > /dev/null
		size=$(wc -c <"${tmp_dir}/temp.bin")
		# bisection: Is it too large or too small?
		echo size ${size}
		echo targetsize ${targetsize}
		if [ `echo "$size > $targetsize" | bc` == "1" ]; then
				# rate is too large, lower the quality.
				echo current param $cur is too low, rate is too high, lower the quality. actual size : $size target size : $targetsize
				min=$cur
				lowBoundMoved=1
		else
				echo current param $cur is too high, rate is too low, increase the quality. actual size : $size target size : $targetsize
				max=$cur
				highBoundMoved=1
		fi
		niter=$(bc <<< "(${niter}+1)")
		#adapt the high bound if the guess on the range was not good
		if [ $(bc <<< "${max}-${min}") == "1" ] && [ ${highBoundMoved} == "0" ]; then
				max=$(bc <<< "${max}+10")
		fi
		if [ $(bc <<< "${max}-${min}") == "1" ] && [ ${lowBoundMoved} == "0" ]; then
				min=$(bc <<< "${min}-5")
				#we dont want negative qp
				flagneg=$(bc <<< "${min}<0")
				if [ ${flagneg} == "1" ]; then 
					min=0
				fi
		fi
  done
	lastvalid=${max}
	echo best ${lastvalid}
	cat ${src_dir}/*.${extension} > ${tmp_dir}/in.yuv
	sizeTot=$(wc -c <"${tmp_dir}/in.yuv")
	numFiles=$(bc <<< "${sizeTot}/${origsize}")
	${HEVCPATH}/TAppEncoderStatic -c ${config_file} -i ${tmp_dir}/in.yuv -b ${tmp_dir}/temp.bin -o ${tmp_dir}/out.yuv -wdt ${width} -hgt ${height} --InputBitDepth=10 --InternalBitDepth=10 --FramesToBeEncoded=${numFiles} --FrameSkip=0 --FrameRate=${fps} --InputChromaFormat=422 --QP=${lastvalid} 2>&1 > /dev/null
	mkdir ${tmp_dir}/out
	split -d -b ${origsize} ${tmp_dir}/out.yuv ${tmp_dir}/out/out
	outlist=( $(find -L ${tmp_dir}/out -type f|grep -v ".txt$"|sort) )	
	i=0
 	for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
    g=${f##*/}
    name=${g/.*}
		test_file=${test_dir}/${name}${errorsuffix}.${extension}
		origName=${outlist[$i]}
    cp ${origName} ${test_file}
		i=${i}+1
  done
	size=$(wc -c <"${tmp_dir}/temp.bin")
	actualbpp=$(bc <<< "scale=4; ${size}/${numFiles}/${width}/${height}*8")
	echo compressed bitstream size ${size} actual bpp ${actualbpp} target bpp ${bpp}
	rm -r ${tmp_dir}/*
	rmdir ${tmp_dir}
	echo niter ${niter}
}

function hevc
{
  bpp=$1
  src_dir=$2
  color_space=$3
	chroma_sub=$4
	bit_depth=$5
	image_size=$6
	test_dir=${7}
	errorPos=$8
	numBits=$9
	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10")) ]]; then
		extension=ppm
	elif [ ${color_space} = "YCbCr" ] && [ ${chroma_sub} = "422" ] && [ ${bit_depth} = 10 ]; then
		extension=raw
	fi
	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorsuffix=
	else
			errorsuffix=_${errorPos}
	fi

	if [ ${color_space} = "RGB" ] && [ ${chroma_sub} = "444" ] && [ ${bit_depth} = 8 ]; then
		echo No supported yet
	elif [ ${color_space} = "RGB" ] && [ ${chroma_sub} = "444" ] && [ ${bit_depth} = 10 ]; then
		echo No supported yet
	elif [ ${color_space} = "YCbCr" ] && [ ${chroma_sub} = "422" ] && [ ${bit_depth} = 10 ]; then
		hevc_YCbCr_422_10b ${bpp} ${src_dir} ${image_size} ${test_dir} ${errorPos} ${numBits} ${extension} ${errorsuffix}
	else
		echo This config is not available for HEVC
	fi
}


# usage:
#   hevc.sh bpp src_dir color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)

bpp=$1
src_dir=$2
color_space=$3
chroma_sub=$4
bit_depth=$5
image_size=$6
test_dir=${7}
errorPos=$8
numBits=$9
shift 9

if [ -z ${bpp} ] || [ -z ${src_dir} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${test_dir} ]; then
  echo "Usage: hevc.sh bpp src_dir color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)"
  exit 1
fi

if [ -z ${errorPos} ] && [ -z ${numBits} ]; then
	errorPos=0
	numBits=0
fi

hevc ${bpp} ${src_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${test_dir} ${errorPos} ${numBits}









