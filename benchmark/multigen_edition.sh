#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C

source benchmark/paths.sh

# usage:
#  multigen_edition.sh codec bitrate src_dir src_dir_sb_factor color_space chroma_sub bit_depth image_size niter comparison_with_original edition_type

codec=$1
bpp=$2
src_dir=$3
src_dir_sb_factor=$4
color_space=$5
chroma_sub=$6
bit_depth=$7
image_size=$8
niter=$9
comparison_with_original=${10}
edition_type=${11}
edition_config=${12}

pixel_shifts_verticalDEF=(4 2 0 0 -2 -4 0 2 4)
pixel_shifts_horizontalDEF=(4 0 -2 -2 0 0 2 0 -4)
pixel_shifts_verticalHALFDEF=(2 1 0 0 -1 -2 0 1 2)
pixel_shifts_horizontalHALFDEF=(2 0 -1 -1 0 0 1 0 -2)
pixel_shifts_verticalVHALFDEF=(2 1 0 0 -1 -2 0 1 2)
pixel_shifts_horizontalVHALFDEF=(4 0 -2 -2 0 0 2 0 -4)


if [[ ("${chroma_sub}" == "422") ]]; then
	if [[ ("${edition_config}" == "DEF") ]]; then
			pixel_shifts_vertical=("${pixel_shifts_verticalDEF[@]}")
			pixel_shifts_horizontal=("${pixel_shifts_horizontalDEF[@]}")
	elif [[ ("${edition_config}" == "VHALFDEF") ]]; then
			pixel_shifts_vertical=("${pixel_shifts_verticalVHALFDEF[@]}")
			pixel_shifts_horizontal=("${pixel_shifts_horizontalVHALFDEF[@]}")
	else
			echo Please specify edition config
	fi
else
	if [[ ("${edition_config}" == "DEF") ]]; then
			pixel_shifts_vertical=("${pixel_shifts_verticalDEF[@]}")
			pixel_shifts_horizontal=("${pixel_shifts_horizontalDEF[@]}")
	elif [[ ("${edition_config}" == "HALFDEF") ]]; then
			pixel_shifts_vertical=("${pixel_shifts_verticalHALFDEF[@]}")
			pixel_shifts_horizontal=("${pixel_shifts_horizontalHALFDEF[@]}")
	else
			echo Please specify edition config
	fi
fi


width=${image_size/x*}
height=${image_size#*x}

tmp_dir=$(mktemp -d /tmp/mgedition_XXXXX)
tempin=${tmp_dir}/tempin.raw
tempout=${tmp_dir}/tempout.raw
tmp_src_dir=${tmp_dir}/tmp_src_dir
mkdir -p ${tmp_src_dir}



if [ -z ${codec} ] || [ -z ${bpp} ] || [ -z ${src_dir} ] || [ -z ${src_dir_sb_factor} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${niter} ] || [ -z ${comparison_with_original} ] || [ -z ${edition_type} ]; then
  echo usage multigen_edition.sh codec bitrate src_dir src_dir_sb_factor color_space chroma_sub bit_depth image_size niter comparison_with_original edition_type
  exit 1
fi

mkdir -p results/multi_generation_edition/${codec}_${edition_type}_${edition_config}
output_dir=results/multi_generation_edition/${codec}_${edition_type}_${edition_config}
short_name=${src_dir##*/}


if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
	extension=ppm
	iodifftest_suffix=""
elif [[ ("${color_space}" == "YCbCr") && ("${chroma_sub}" == "422") && (("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
	extension=yuv
	if [ ${bit_depth} == "10" ]; then
		iodifftest_suffix=@${width}x${height}x3:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1
	elif [ ${bit_depth} == "12" ]; then
		iodifftest_suffix=@${width}x${height}x3:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1
	fi
fi

for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
	g=${f##*/}
	name=${g/.*}
	cp ${f} ${tmp_src_dir}/${name}_${edition_type}_${edition_config}.${extension}
done

ls ${tmp_src_dir}


if [ "${edition_type}" == "E1" ]; then
	edition_path=${PIXEL_SHIFTPATH}/pixel_shift
else
	edition_path=
fi

x0crop=16
y0crop=16
x1crop=$((${width}-16-1))
y1crop=$((${height}-16-1))

for ((r=1;r<=niter;++r)); do

	if [ "${edition_type}" == "E1" ]; then
		cmd_line_option="${pixel_shifts_horizontal[$(($r - 1))]} ${pixel_shifts_vertical[$(($r - 1))]}"
	else
		cmd_line_option=""
	fi

	echo iteration number ${r}
	name=${short_name}_sb${src_dir_sb_factor}_${edition_type}_${edition_config}_${codec}_${bpp/./_}bpp_r${r}
	name_previous=${short_name}_sb${src_dir_sb_factor}_${edition_type}_${edition_config}_${codec}_${bpp/./_}bpp_r$(($r - 1))
    if [ $r = 1 ]; then
      input_dir=${tmp_src_dir}
			compa_dir=${tmp_src_dir}
			current_sb_factor=${src_dir_sb_factor}
    else
      input_dir=${previous_decomp_dir}
			compa_dir=${previous_orig_dir}
			current_sb_factor=1
    fi

    if [ $comparison_with_original = 1 ]; then
			bash benchmark/gen_edition.sh ${name} ${codec} ${bpp} ${input_dir} ${current_sb_factor} ${compa_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${output_dir} ${x0crop} ${y0crop} ${x1crop} ${y1crop}
    else
       bash benchmark/gen_edition.sh ${name} ${codec} ${bpp} ${input_dir} ${current_sb_factor} ${input_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${output_dir} ${x0crop} ${y0crop} ${x1crop} ${y1crop}
    fi

	shiftX=${pixel_shifts_horizontal[$(($r - 1))]}
	shiftY=${pixel_shifts_vertical[$(($r - 1))]}
	x0crop=$((${x0crop}+${shiftX}))
	y0crop=$((${y0crop}+${shiftY}))
	x1crop=$((${x1crop}+${shiftX}))
	y1crop=$((${y1crop}+${shiftY}))



	if (( $r < ${niter} )); then
		orig_dir=${output_dir}/${short_name}_sb${src_dir_sb_factor}_${edition_type}_${edition_config}_original_after_edition_r$(($r))
		mkdir -p ${orig_dir}
		#at first gen
		if [ $r = 1 ]; then
			# loop on the original folder
			i=0
		  	for f in $(find -L ${tmp_src_dir} -type f|grep -v ".txt$"|sort); do
				g=${f##*/}
			  	z=${g/.*}
				original_name=${z}.${extension}
				if [ ${i} = 0 ]; then
					${DIFFTESTPATH}/difftest_ng	--shift ${cmd_line_option} --convert ${orig_dir}/${original_name}${iodifftest_suffix} ${f}${iodifftest_suffix} -
				fi
				i=$(bc <<< "(${i}+1)%${src_dir_sb_factor}")
			done
		#at other gen
		else
			# loop on the original folder
		  	for f in $(find -L ${previous_orig_dir} -type f|grep -v ".txt$"|sort); do
				g=${f##*/}
			  	z=${g/.*}
				original_name=${z}.${extension}
				${DIFFTESTPATH}/difftest_ng	--shift ${cmd_line_option} --convert ${orig_dir}/${original_name}${iodifftest_suffix} ${f}${iodifftest_suffix} -
			done

		fi
		previous_orig_dir=${orig_dir}

		decomp_dir=${output_dir}/${short_name}_sb${src_dir_sb_factor}_${edition_type}_${edition_config}_${codec}_${bpp/./_}bpp_after_edition_r${r}
		mkdir -p ${decomp_dir}
		i=0
		# loop on the decompressed folder
	  	for f in $(find -L ${output_dir}/${name} -type f|grep -v ".txt$"|sort); do
			g=${f##*/}
		  	z=${g/.*}
			original_name=${z}.${extension}
			${DIFFTESTPATH}/difftest_ng	--shift ${cmd_line_option} --convert ${decomp_dir}/${original_name}${iodifftest_suffix} ${f}${iodifftest_suffix} -
			done
		previous_decomp_dir=${decomp_dir}
	fi

#   make a little room
    #if [ $r -gt 1 ]; then
    #    rm -rfv ${output_dir}/${name_previous}
    #fi
done
rm -r ${tmp_dir}
#   move the last one also
#rm -rfv ${output_dir}/${name}
