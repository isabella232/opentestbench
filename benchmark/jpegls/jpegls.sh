#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)

#!/bin/bash
export LANG=C

source benchmark/paths.sh

function jpegls_RGB_444_8b
{
	bpp=$1
	src_file=$2
	image_size=$3
	test_file=$4
	errorPos=$5
	numBits=$6
	shift 7
	fps=50
	width=${image_size/x*}
	height=${image_size#*x}

	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorTest=0
	else
			errorTest=1
	fi
	tmp_dir=$(mktemp -d /tmp/jpegLS_XXXXX)
	#caution, the jpegrate script is in the jpeg folder ! (because it is the same)
	bash benchmark/jpeg/jpegrate.sh -b ${bpp} -ls 2 ${src_file} ${tmp_dir}/temp.jpeg
	# where "-ls" defines the JPEG-LS mode, 0=scan interleaved, 1=line interleaved
	# 2=pixel interleaved (not for yuv-images).
	if [ ${errorTest} = 1 ]; then
		${EIPATH}/error_insertion1b ${tmp_dir}/temp.jpeg ${errorPos} ${numBits}
	fi
	${JPEGXTPATH}/jpeg ${tmp_dir}/temp.jpeg ${test_file} 2>&1 > /dev/null
	size=$(wc -c <"${tmp_dir}/temp.jpeg")
	actualbpp=$(bc <<< "scale=4; (${size}/${width}/${height}*8)")
	echo compressed bitstream size ${size} actual bpp ${actualbpp} target bpp ${bpp}
	rm -r ${tmp_dir}/*
	rmdir ${tmp_dir}
}




function jpegls
{
  bpp=$1
  src_dir=$2
  color_space=$3
	chroma_sub=$4
	bit_depth=$5
	image_size=$6
	test_dir=${7}
	errorPos=$8
	numBits=$9

	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10")) ]]; then
		extension=ppm
	elif [ ${color_space} = "YCbCr" ] && [ ${chroma_sub} = "422" ] && [ ${bit_depth} = 10 ]; then
		extension=v210
	fi

	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorsuffix=
	else
			errorsuffix=_${errorPos}
	fi

  for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
    g=${f##*/}
    name=${g/.*}
    echo ${name}.${extension}
		test_file=${test_dir}/${name}${errorsuffix}.${extension}
    if [ -f ${test_file} ]; then
      echo "Already there!"
    else
			if [ ${color_space} = "RGB" ] && [ ${chroma_sub} = "444" ] && [ ${bit_depth} = 8 ]; then
				jpegls_RGB_444_8b ${bpp} ${f} ${image_size} ${test_file} ${errorPos} ${numBits}
			elif [ ${color_space} = "RGB" ] && [ ${chroma_sub} = "444" ] && [ ${bit_depth} = 10 ]; then
				jpegls_RGB_444_10b ${bpp} ${f} ${image_size} ${test_file} ${errorPos} ${numBits}
			elif [ ${color_space} = "YCbCr" ] && [ ${chroma_sub} = "422" ] && [ ${bit_depth} = 10 ]; then
				jpegls_YCbCr_422_10b ${bpp} ${f} ${image_size} ${test_file} ${errorPos} ${numBits}
			else
				echo This config is not available for JPEG
			fi
    fi
  done
}



# usage:
#   jpegls.sh bpp src_dir color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)

bpp=$1
src_dir=$2
color_space=$3
chroma_sub=$4
bit_depth=$5
image_size=$6
test_dir=${7}
errorPos=$8
numBits=$9
shift 9

if [ -z ${bpp} ] || [ -z ${src_dir} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${test_dir} ]; then
  echo "Usage: jpegls.sh bpp src_dir color_space chroma_sub bit_depth image_size test_dir (errorPos) (numBits)"
  exit 1
fi

if [ -z ${errorPos} ] && [ -z ${numBits} ]; then
	errorPos=0
	numBits=0
fi

jpegls ${bpp} ${src_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${test_dir} ${errorPos} ${numBits}
