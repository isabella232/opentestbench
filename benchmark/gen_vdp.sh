#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C

source benchmark/paths.sh

function matlab_script
{
		local type1=${1#*.}
    local img1="`realpath $1`"
    local img2="`realpath $2`"
		local tmpdir=$3
    local out=$tmpdir
    local pwd="`pwd`"
    local vdpdir="`realpath $VDPPATH`"
		local image_size=$4
		local	width=${image_size/x*}
		local height=${image_size#*x}
    local depth=$5
    local scale
    local colorspace=$6
    local map="`realpath $7`"
	
		logfile=$tmpdir/log

    if [ ! -f "$img1" ]; then
			echo "Input file $img1 does not exist"
			exit 25
    fi

    if [ ! -f "$img2" ]; then
			echo "Input file $img2 does not exist"
			exit 25
    fi

		#change format to be fed to matlab (needed for yuv)
		if [ "$type1" == "yuv" ]; then
			if [ "$depth" == "10" ]; then
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img1.pgm "$img1"@${width}x${height}x3:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1 -
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img2.pgm "$img2"@${width}x${height}x3:[6-],[10-=0]:[6-]/2x1,[10-=1]/2x1:[6-]/2x1,[10-=2]/2x1 -
					scale=$(bc <<< "(2^10)-1")
			elif [ "$depth" == "8" ]; then
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img1.pgm "$img1"@${width}x${height}x3:[8=0],[8]/2x1,[8]/2x1 -
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img2.pgm "$img2"@${width}x${height}x3:[8=0],[8]/2x1,[8]/2x1 -
					scale=$(bc <<< "(2^8)-1")
			elif [ "$depth" == "12" ]; then
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img1.pgm "$img1"@${width}x${height}x3:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1 -
					${DIFFTESTPATH}/difftest_ng --only 0 --convert $tmpdir/img2.pgm "$img2"@${width}x${height}x3:[4-],[12-=0]:[4-]/2x1,[12-=1]/2x1:[4-]/2x1,[12-=2]/2x1 -
					scale=$(bc <<< "(2^12)-1")
			fi
			img1=$tmpdir/img1.pgm
			img2=$tmpdir/img2.pgm
		elif [ "$type1" == "ppm" ]; then
			if [ "$depth" == "10" ]; then
					scale=$(bc <<< "(2^16)-1")
			elif [ "$depth" == "8" ]; then
					scale=$(bc <<< "(2^8)-1")
			elif [ "$depth" == "12" ]; then
					scale=$(bc <<< "(2^16)-1")
			fi
		fi

    cat >"$tmpdir/script.m" <<EOF
addpath('${vdpdir}');
addpath('${vdpdir}/matlabPyrTools_1.4_fixed');
i1=double(imread('$img1'))/$scale;
i2=double(imread('$img2'))/$scale;

q = hdrvdp(i1,i2,'$colorspace',60,{'rgb_display','led-lcd','surround_l',15,'peak_sensitivity',1.8});
px = sum(q.P_map(:)>0.75)/numel(q.P_map);
q.Q;
file=fopen('$tmpdir/matout.metric','w');
fprintf(file,'%g\n',q.Q);
fclose(file);
file=fopen('$tmpdir/matout.pxcount','w');
fprintf(file,'%g\n',px);
fclose(file);
file=fopen('$tmpdir/matout.detect','w');
fprintf(file,'%g\n',q.P_det);
fclose(file);
imwrite(q.P_map,'$map');
quit;
EOF
		echo "Running now matlab with options matlab -nojvm -nodesktop -nosplash and the script" >>$logfile
		cat $tmpdir/script.m >>$logfile
		cd $mathdir && matlab -nojvm -nodesktop -nosplash -r "`cat $tmpdir/script.m | tr -d '\n'`" 1>$out/matout 2>>$logfile </dev/null
		echo "Output is" >>$logfile
		cat $out/matout >>$logfile
		cat $tmpdir/matout.metric >>$logfile
		cd "$pwd"
}


function gen
{
	test_name=$1
	codec=$2
	bpp=$3
	src_dir=$4
	src_dir_sb_factor=$5
	compa_dir=$6
	color_space=$7
	chroma_sub=$8
	bit_depth=$9
	image_size=${10}
	output_dir=${11}
  shift 11

			
	tmpdir="`mktemp -d`"
	logfile=$tmpdir/log

  mkdir -p ${output_dir}/${test_name}
	test_dir=${output_dir}/${test_name}
	mkdir -p ${output_dir}/mapVpd_${test_name}

	if [[ ("${color_space}" == "RGB") && ("${chroma_sub}" == "444") && (("${bit_depth}" == "8") || ("${bit_depth}" == "10") || ("${bit_depth}" == "12")) ]]; then
		extension=ppm
		colorspace="sRGB-display"
	elif [[ ("${color_space}" == "YCbCr") && ("${chroma_sub}" == "422") && ("${bit_depth}" == "10") ]]; then
		extension=yuv
		colorspace="luma-display"
	elif [[ ("${color_space}" == "YCbCr") && ("${chroma_sub}" == "422") && ("${bit_depth}" == "12") ]]; then
		extension=yuv
		colorspace="luma-display"
	fi
  bash benchmark/${codec}/${codec}.sh ${bpp} ${src_dir} ${src_dir_sb_factor} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${test_dir}
	i=0
	countSc=0
	echo -n "" >  ${output_dir}/vdp_${test_name}.dat
  for f in $(find -L ${src_dir} -type f|grep -v ".txt$"|sort); do
		if [ ${i} = 0 ]; then
		  g=${f##*/}
		  name=${g/.*}
			name=${name/_${codec}_${bpp/./_}bpp}
			test_file=$(find -L ${test_dir} -type f -name ${name}_${codec}_${bpp/./_}bpp_sc*.${extension})
			test_file_final_name=${test_dir}/${name}_${codec}_${bpp/./_}bpp.${extension}
			compa_file=${compa_dir}/${name}.${extension}	
			#in the case of "Already there" (the info on the sizes is not available anymore)
		  if [ -f ${test_file_final_name} ]; then
				matlab_script ${test_file_final_name} ${compa_file} ${tmpdir} ${image_size} ${bit_depth} ${colorspace} ${output_dir}/mapVpd_${test_name}/mapVpd_${test_name}.ppm
				vdp=`cat $tmpdir/matout.metric | tr '\n' ' '`
				px=`cat $tmpdir/matout.pxcount | tr '\n' ' '`
				pdet=`cat $tmpdir/matout.detect | tr '\n' ' '`		
		    echo ${name}.${extension} ${vdp} ${px} ${pdet} >> ${output_dir}/vdp_${test_name}.dat
			elif [ ${test_file} != "" ]; then
				temp=${test_file/.*}
				temp2=${temp##*_sc}
				realSize=${temp2/x*}
				targetSize=${temp2#*x}
				sizeExceeded=$(bc <<< "${realSize} > ${targetSize}")
				matlab_script ${test_file} ${compa_file} ${tmpdir} ${image_size} ${bit_depth} ${colorspace} ${output_dir}/mapVpd_${test_name}/mapVpd_${test_name}.ppm
				vdp=`cat $tmpdir/matout.metric | tr '\n' ' '`
				px=`cat $tmpdir/matout.pxcount | tr '\n' ' '`
				pdet=`cat $tmpdir/matout.detect | tr '\n' ' '`		
				if [ ${sizeExceeded} = 1 ]; then
		    	echo ${name}.${extension} ${vdp} ${px} ${pdet} ${realSize} ${targetSize} !!! >> ${output_dir}/vdp_${test_name}.dat
					countSc=$(bc <<< "${countSc}+1")
				else
					echo ${name}.${extension} ${vdp} ${px} ${pdet} ${realSize} ${targetSize} >> ${output_dir}/vdp_${test_name}.dat
				fi
				mv ${test_file} ${test_file_final_name}
			else #if the file is not there
				echo ${name}.${extension} NaN NaN NaN NaN >> ${output_dir}/vdp_${test_name}.dat
		  fi
	#    to remove the picture in the output folder
	#    rm ${test_file_final_name}
		fi
		i=$(bc <<< "(${i}+1)%${src_dir_sb_factor}")
  done
	echo NumberSizeExceeded ${countSc} >> ${output_dir}/vdp_${test_name}.dat
	rm -r $tmpdir
}






# usage:
#   gen.sh test_name codec bpp src_dir src_dir_sb_factor compa_dir color_space chroma_sub bit_depth image_size output_dir

test_name=$1
codec=$2
bpp=$3
src_dir=$4
src_dir_sb_factor=$5
compa_dir=$6
color_space=$7
chroma_sub=$8
bit_depth=$9
image_size=${10}
output_dir=${11}
shift 11

  
if [ -z ${test_name} ] || [ -z ${codec} ] || [ -z ${bpp} ] || [ -z ${src_dir} ] || [ -z ${src_dir_sb_factor} ] || [ -z ${compa_dir} ] || [ -z ${color_space} ] || [ -z ${chroma_sub} ] || [ -z ${bit_depth} ] || [ -z ${image_size} ] || [ -z ${output_dir} ]; then
  echo "Usage: gen.sh test_name codec bpp src_dir src_dir_sb_factor compa_dir color_space chroma_sub bit_depth image_size output_dir"
  exit 1
fi

gen ${test_name} ${codec} ${bpp} ${src_dir} ${src_dir_sb_factor} ${compa_dir} ${color_space} ${chroma_sub} ${bit_depth} ${image_size} ${output_dir}
