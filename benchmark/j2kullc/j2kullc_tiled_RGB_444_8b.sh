#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)
#   Sébastien Lugan (sebastien.lugan@uclouvain.be)

#!/bin/bash
export LANG=C

source benchmark/paths.sh

function xstr
{
  echo $(for ((i=0;i<${1};++i)); do echo -n ${2}; done)
}

function kdu_compress
{
  geom=${1}
  kinput_file=${2}
  koutput_file=${3}
  rate=${4}
  levels=${5}
  if [ -z ${levels} ]; then
    levels=5
  fi
  Cblk=${6}
  if [ -z ${Cblk} ]; then
    Cblk=32x32
  fi
  Cblk=${Cblk##*x},${Cblk/x*}
  Cprec=$(xstr $((${levels})) "{256,256},")"{128,128}"
  
  width=${geom/x*}
  height=${geom#*x}
  width2=$((${width}/2))
  LD_LIBRARY_PATH=${KDUPATH} ${KDUPATH}/kdu_compress \
  -i ${kinput_file} -o ${koutput_file} \
  Stiles="{2,8192}" ORGgen_tlm=3 ORGtparts=C Corder="{CPRL}" Clevels=${levels} \
  Cprecincts="${Cprec}" Cblk="{${Cblk}}" Creversible=no Cycc=yes Cmodes="{RESET|RESTART|CAUSAL}" -precise Qstep=.0001 \
  -rate ${rate} -no_weights -num_threads 0
}

function kdu_expand
{
  LD_LIBRARY_PATH=${KDUPATH} ${KDUPATH}/kdu_expand -i ${1} -o ${2} -precise  -num_threads 0
}

function tiled_compress
{	
	bpp=$1
	src_file=$2
	image_size=$3
	stripes_height=$4
	test_file=$5
  errorPos=${6}
  numBits=${7}

	if [ ${errorPos} = 0 ] && [ ${numBits} = 0 ]; then
			errorTest=0
	else
			errorTest=1
	fi


  sn=${src_file##*/}  	# Short name
  bn=${sn/.*}           # Base name
	
  width=${image_size/x*}
  height=${image_size#*x}
	
  # Stripes geometry
  res_full=${width}x${height}
  res_R=${width}x${stripes_height}
  res_G=${width}x${stripes_height}
  res_B=${width}x${stripes_height}
	tilenum=$(bc <<< "${height}/${stripes_height}")
  tile=1x${tilenum}

  # J2K parameters
  cblk=1024x4
  levels=6

  # Step 1: split the image

  if [ ! -d ${TMPDIR}/t_${res_R} ]; then
    mkdir ${TMPDIR}/t_${res_R}
  fi

  ${IMPATH}/convert -size ${res_full} ${src_file} -crop ${res_R} \
            -endian msb ${TMPDIR}/t_${res_R}/${bn}_rgb_%03d.tiff

  # Step 2: compress the individual tiles
  dirname=${TMPDIR}/r_${bpp}_${cblk}_${res_R}
  if [ ! -d ${dirname} ]; then mkdir ${dirname}; fi
  for f in "${TMPDIR}/t_${res_R}/${bn}_rgb"_*.tiff; do
    out=${dirname}/kdu_${f##*/}
    out=${out/_rgb_/_}
    out=${out/.tiff}.j2k
    kdu_compress ${res_R} ${f} ${out} ${bpp} ${levels} ${cblk} 2>&1 > /dev/null
    wait
  done

# Step 3: uncompress the individual tiles
  let i=0
  posError=$(bc <<< "scale=4; $errorPos*($tilenum)")
  for f in "${dirname}/kdu_${bn}"_*.j2k; do
		if [ ${errorTest} = 1 ]; then
			let lowBound=i
		  let highBound=i+1
	    #echo OOK $lowBound $highBound OK
	    #echo $posError
		  flagIn=$(bc <<< "scale=4; $posError>$lowBound && $posError<$highBound")
	    #echo $flagIn
		  if [ $flagIn = 1 ]; then
	        #echo temper $f
		      insidePos=$(bc <<< "scale=4; ($posError-$lowBound)") 
		      ${EIPATH}/error_insertion1b "${f}" ${insidePos} ${numBits}
		  fi
		fi
    kdu_expand "${f}" "${f/.j2k}_rgb.bmp" 2>&1 > /dev/null
    # work in bmp because kdu in tiff gives greyscale image
    ${IMPATH}/convert ${f/.j2k}_rgb.bmp ${f/.j2k}_rgb.tiff
    wait
		let i=i+1
  done

 # Step 4: recombine the individual tiles
${IMPATH}/montage -tile ${tile} -geometry ${res_R} -size ${res_R} -depth 8 -endian msb \
    ${dirname}/kdu_${bn}_???_rgb.tiff ${test_file}
}


# usage:
#   j2kullc_tiled_RGB_444_8b.sh bpp src_file image_size stripes_height test_file (errorPos) (numBits)

bpp=$1
src_file=$2
image_size=$3
stripes_height=$4
test_file=$5
errorPos=$6
numBits=$7
shift 7

if [ -z ${bpp} ] || [ -z ${src_file} ] || [ -z ${image_size} ] || [ -z ${stripes_height} ] || [ -z ${test_file} ]; then
  echo "Usage: j2kullc_tiled_RGB_444_8b.sh bpp src_file image_size stripes_height test_file (errorPos) (numBits)"
  exit 1
fi

if [ -z ${errorPos} ] || [ -z ${numBits} ]; then
	errorPos=0
	numBits=0
fi

TMPDIR=$(mktemp -d /tmp/j2ktiler_XXXX)
tiled_compress ${bpp} ${src_file} ${image_size} ${stripes_height} ${test_file} ${errorPos} ${numBits}
rm -rf ${TMPDIR}
