#    Opentestbench : an open-source framework to assess the performances of image compression schemes
#    Copyright (C) 2015  intoPIX s.a. , Sébastien Lugan 
#    Copyright (C) 2015  Universite Catholique de Louvain, Alexandre Willème
#
#    Opentestbench is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
#   For any question please contact : 
#   Alexandre Willème (alexandre.willeme@uclouvain.be)


#!/bin/bash
export LANG=C
codec=$1
path=$2

#a number that is only used to identify the log of the test
testnumber="${codec}SG"

# either singlegen multigen or errortest
test_type=singlegen


# list of bitrates to test  (in bpp)


if [[ ("${codec}" == "jpeg_xs_high") ]]; then
  bitrates=(12.8 3.2 4.266 3.2 6 3.2 3)
  #list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
  content_dirs=(${path}/FemaleStripedHorseFly_1920x1080_8b \
  ${path}/INTOPIX_ChineseEditing_3840x2160_8b \
  ${path}/ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040 \
  ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_16022 \
  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_00004606 \
  ${path}/INTOPIX_GoogleMaps_3840x2160_8b \
  ${path}/PathoHigh_4096x4096_16b)
  #one file on ${content_dirs_subsampling_factor} is processed in the tests
  content_dirs_sb_factors=(1 1 1 1 1 1 1)
  # either RGB or YCbCr
  color_spaces=(RGB RGB RGB YCbCr RGB RGB RGB)
  # either 444 or 422
  chroma_subs=(444 444 444 422 444 444 444)
  # either 8, 10 or 12 bits
  bit_depths=(8 8 8 10 10 8 16)
  # WIDTHxHEIGHT
  image_sizes=(1920x1080 3840x2160 2880x1620 3840x2160 4096x1744 3840x2160 4096x4096)
elif [[ ("${codec}" == "jpeg_xs_main") ]]; then
  bitrates=(6.4 8.084 12.8 6.4 4.266 6.4 6 3.2 6)
  #list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
  content_dirs=(${path}/HintergrundMusik_1920x1080_8b \
  ${path}/Tools_1524x1200_8b \
  ${path}/FemaleStripedHorseFly_1920x1080_8b \
  ${path}/INTOPIX_ChineseEditing_3840x2160_8b \
  ${path}/ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040 \
  ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_16022 \
  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_00004606 \
  ${path}/INTOPIX_GoogleMaps_3840x2160_8b \
  ${path}/PathoMain_4096x4096_16b)
  #one file on ${content_dirs_subsampling_factor} is processed in the tests
  content_dirs_sb_factors=(1 1 1 1 1 1 1 1 1)
  # either RGB or YCbCr
  color_spaces=(RGB RGB RGB RGB RGB YCbCr RGB RGB RGB)
  # either 444 or 422
  chroma_subs=(444 444 444 444 444 422 444 444 444)
  # either 8, 10 or 12 bits
  bit_depths=(8 8 8 8 8 10 10 8 16)
  # WIDTHxHEIGHT
  image_sizes=(1920x1080 1524x1200 1920x1080 3840x2160 2880x1620 3840x2160 4096x1744 3840x2160 4096x4096)
elif [[ ("${codec}" == "jpeg_xs_low_memory") ]]; then
  bitrates=(12.8 6.4 8.533 6.4 6 6.4 12)
  #list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
  content_dirs=(${path}/FemaleStripedHorseFly_1920x1080_8b \
  ${path}/INTOPIX_ChineseEditing_3840x2160_8b \
  ${path}/ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040 \
  ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_16022 \
  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_00004606 \
  ${path}/INTOPIX_GoogleMaps_3840x2160_8b \
  ${path}/PathoLowMemory_4096x4096_16b)
  #one file on ${content_dirs_subsampling_factor} is processed in the tests
  content_dirs_sb_factors=(1 1 1 1 1 1 1)
  # either RGB or YCbCr
  color_spaces=(RGB RGB RGB YCbCr RGB RGB RGB)
  # either 444 or 422
  chroma_subs=(444 444 444 422 444 444 444)
  # either 8, 10 or 12 bits
  bit_depths=(8 8 8 10 10 8 16)
  # WIDTHxHEIGHT
  image_sizes=(1920x1080 3840x2160 2880x1620 3840x2160 4096x1744 3840x2160 4096x4096)
elif [[ ("${codec}" == "jpeg_xs_low_logic") ]]; then
  bitrates=(12.8 6.4 4.266 6.4 6 6.4 6)
  #list of pictures folder to use and the related picture format in color_spaces chroma_subs bit_depths image_sizes
  content_dirs=(${path}/FemaleStripedHorseFly_1920x1080_8b \
  ${path}/INTOPIX_ChineseEditing_3840x2160_8b \
  ${path}/ARRI_Lake2_2880x1620p_24_8b_bt709_444_0040 \
  ${path}/VQEG_ParkJoy_3840x2160p_50_10b_bt709_422_16022 \
  ${path}/BLENDER_Sintel2_4096x1744p_24_10b_sRGB_444_00004606 \
  ${path}/INTOPIX_GoogleMaps_3840x2160_8b \
  ${path}/PathoMain_4096x4096_16b)
  #one file on ${content_dirs_subsampling_factor} is processed in the tests
  content_dirs_sb_factors=(1 1 1 1 1 1 1)
  # either RGB or YCbCr
  color_spaces=(RGB RGB RGB YCbCr RGB RGB RGB)
  # either 444 or 422
  chroma_subs=(444 444 444 422 444 444 444)
  # either 8, 10 or 12 bits
  bit_depths=(8 8 8 10 10 8 16)
  # WIDTHxHEIGHT
  image_sizes=(1920x1080 3840x2160 2880x1620 3840x2160 4096x1744 3840x2160 4096x4096)
fi

# only used for multigen : number of encoding/decoding cycles to perform
niter=10
# only used for multigen : =1 if the comparison must be made wrt the original picture and =0 if the comparison is made wrt the input of each generation
comparison_with_original=1
# only used for error : number of random bit flip to be tested
nerrors=1
# The type of edition if any
edition_type="pixel_shift"
edition_config="1"

#-----------------------------------------------------------------------------

source benchmark/paths.sh
mkdir -p log_files
logfile="./log_files/log_${testnumber}.dat"
echo -n "" >  ${logfile}
for ((b=0; b<${#content_dirs[@]}; ++b)); do
			echo "Processing step: ${test_type} codec ${codec} bitrate ${bitrates[$b]} content_dir ${content_dirs[$b]}"
			echo -n "Processing step: codec ${codec} bitrate ${bitrates[$b]} content_dir ${content_dirs[$b]}" >> ${logfile}
			if [ ${test_type} = "singlegen" ]; then
				bash benchmark/singlegen.sh ${codec} ${bitrates[$b]} ${content_dirs[$b]} ${content_dirs_sb_factors[$b]} ${color_spaces[$b]} ${chroma_subs[$b]} ${bit_depths[$b]} ${image_sizes[$b]} 1>>${logfile} 2>>${logfile}
			else
				echo This test type does not exist
			fi
done
